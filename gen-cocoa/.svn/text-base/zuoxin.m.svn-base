/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "zuoxin.h"

@implementation RuntimeError

- (id) init
{
  return [super initWithName: @"RuntimeError" reason: @"unknown" userInfo: nil];
}

- (id) initWithErrornumber: (int32_t) errornumber errormessage: (NSString *) errormessage
{
  self = [self init];
  __errornumber = errornumber;
  __errornumber_isset = YES;
  __errormessage = [errormessage retain_stub];
  __errormessage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"errornumber"])
  {
    __errornumber = [decoder decodeInt32ForKey: @"errornumber"];
    __errornumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"errormessage"])
  {
    __errormessage = [[decoder decodeObjectForKey: @"errormessage"] retain_stub];
    __errormessage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__errornumber_isset)
  {
    [encoder encodeInt32: __errornumber forKey: @"errornumber"];
  }
  if (__errormessage_isset)
  {
    [encoder encodeObject: __errormessage forKey: @"errormessage"];
  }
}

- (void) dealloc
{
  [__errormessage release_stub];
  [super dealloc_stub];
}

- (int32_t) errornumber {
  return __errornumber;
}

- (void) setErrornumber: (int32_t) errornumber {
  __errornumber = errornumber;
  __errornumber_isset = YES;
}

- (BOOL) errornumberIsSet {
  return __errornumber_isset;
}

- (void) unsetErrornumber {
  __errornumber_isset = NO;
}

- (NSString *) errormessage {
  return [[__errormessage retain_stub] autorelease_stub];
}

- (void) setErrormessage: (NSString *) errormessage {
  [errormessage retain_stub];
  [__errormessage release_stub];
  __errormessage = errormessage;
  __errormessage_isset = YES;
}

- (BOOL) errormessageIsSet {
  return __errormessage_isset;
}

- (void) unsetErrormessage {
  [__errormessage release_stub];
  __errormessage = nil;
  __errormessage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrornumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setErrormessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RuntimeError"];
  if (__errornumber_isset) {
    [outProtocol writeFieldBeginWithName: @"errornumber" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errornumber];
    [outProtocol writeFieldEnd];
  }
  if (__errormessage_isset) {
    if (__errormessage != nil) {
      [outProtocol writeFieldBeginWithName: @"errormessage" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __errormessage];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RuntimeError("];
  [ms appendString: @"errornumber:"];
  [ms appendFormat: @"%i", __errornumber];
  [ms appendString: @",errormessage:"];
  [ms appendFormat: @"\"%@\"", __errormessage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Driver

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDriverid: (int64_t) driverid mobile: (int64_t) mobile name: (NSString *) name score: (int32_t) score longitude: (double) longitude latitude: (double) latitude drivercard: (NSString *) drivercard driveage: (int32_t) driveage province: (NSString *) province drivercount: (int32_t) drivercount state: (int32_t) state picture: (NSData *) picture pictype: (int32_t) pictype address: (NSString *) address sex: (BOOL) sex
{
  self = [super init];
  __driverid = driverid;
  __driverid_isset = YES;
  __mobile = mobile;
  __mobile_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __score = score;
  __score_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __drivercard = [drivercard retain_stub];
  __drivercard_isset = YES;
  __driveage = driveage;
  __driveage_isset = YES;
  __province = [province retain_stub];
  __province_isset = YES;
  __drivercount = drivercount;
  __drivercount_isset = YES;
  __state = state;
  __state_isset = YES;
  __picture = [picture retain_stub];
  __picture_isset = YES;
  __pictype = pictype;
  __pictype_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __sex = sex;
  __sex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"driverid"])
  {
    __driverid = [decoder decodeInt64ForKey: @"driverid"];
    __driverid_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [decoder decodeInt64ForKey: @"mobile"];
    __mobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"score"])
  {
    __score = [decoder decodeInt32ForKey: @"score"];
    __score_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"drivercard"])
  {
    __drivercard = [[decoder decodeObjectForKey: @"drivercard"] retain_stub];
    __drivercard_isset = YES;
  }
  if ([decoder containsValueForKey: @"driveage"])
  {
    __driveage = [decoder decodeInt32ForKey: @"driveage"];
    __driveage_isset = YES;
  }
  if ([decoder containsValueForKey: @"province"])
  {
    __province = [[decoder decodeObjectForKey: @"province"] retain_stub];
    __province_isset = YES;
  }
  if ([decoder containsValueForKey: @"drivercount"])
  {
    __drivercount = [decoder decodeInt32ForKey: @"drivercount"];
    __drivercount_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [decoder decodeInt32ForKey: @"state"];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"picture"])
  {
    __picture = [[decoder decodeObjectForKey: @"picture"] retain_stub];
    __picture_isset = YES;
  }
  if ([decoder containsValueForKey: @"pictype"])
  {
    __pictype = [decoder decodeInt32ForKey: @"pictype"];
    __pictype_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"sex"])
  {
    __sex = [decoder decodeBoolForKey: @"sex"];
    __sex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__driverid_isset)
  {
    [encoder encodeInt64: __driverid forKey: @"driverid"];
  }
  if (__mobile_isset)
  {
    [encoder encodeInt64: __mobile forKey: @"mobile"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__score_isset)
  {
    [encoder encodeInt32: __score forKey: @"score"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__drivercard_isset)
  {
    [encoder encodeObject: __drivercard forKey: @"drivercard"];
  }
  if (__driveage_isset)
  {
    [encoder encodeInt32: __driveage forKey: @"driveage"];
  }
  if (__province_isset)
  {
    [encoder encodeObject: __province forKey: @"province"];
  }
  if (__drivercount_isset)
  {
    [encoder encodeInt32: __drivercount forKey: @"drivercount"];
  }
  if (__state_isset)
  {
    [encoder encodeInt32: __state forKey: @"state"];
  }
  if (__picture_isset)
  {
    [encoder encodeObject: __picture forKey: @"picture"];
  }
  if (__pictype_isset)
  {
    [encoder encodeInt32: __pictype forKey: @"pictype"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__sex_isset)
  {
    [encoder encodeBool: __sex forKey: @"sex"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__drivercard release_stub];
  [__province release_stub];
  [__picture release_stub];
  [__address release_stub];
  [super dealloc_stub];
}

- (int64_t) driverid {
  return __driverid;
}

- (void) setDriverid: (int64_t) driverid {
  __driverid = driverid;
  __driverid_isset = YES;
}

- (BOOL) driveridIsSet {
  return __driverid_isset;
}

- (void) unsetDriverid {
  __driverid_isset = NO;
}

- (int64_t) mobile {
  return __mobile;
}

- (void) setMobile: (int64_t) mobile {
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  __mobile_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) score {
  return __score;
}

- (void) setScore: (int32_t) score {
  __score = score;
  __score_isset = YES;
}

- (BOOL) scoreIsSet {
  return __score_isset;
}

- (void) unsetScore {
  __score_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (NSString *) drivercard {
  return [[__drivercard retain_stub] autorelease_stub];
}

- (void) setDrivercard: (NSString *) drivercard {
  [drivercard retain_stub];
  [__drivercard release_stub];
  __drivercard = drivercard;
  __drivercard_isset = YES;
}

- (BOOL) drivercardIsSet {
  return __drivercard_isset;
}

- (void) unsetDrivercard {
  [__drivercard release_stub];
  __drivercard = nil;
  __drivercard_isset = NO;
}

- (int32_t) driveage {
  return __driveage;
}

- (void) setDriveage: (int32_t) driveage {
  __driveage = driveage;
  __driveage_isset = YES;
}

- (BOOL) driveageIsSet {
  return __driveage_isset;
}

- (void) unsetDriveage {
  __driveage_isset = NO;
}

- (NSString *) province {
  return [[__province retain_stub] autorelease_stub];
}

- (void) setProvince: (NSString *) province {
  [province retain_stub];
  [__province release_stub];
  __province = province;
  __province_isset = YES;
}

- (BOOL) provinceIsSet {
  return __province_isset;
}

- (void) unsetProvince {
  [__province release_stub];
  __province = nil;
  __province_isset = NO;
}

- (int32_t) drivercount {
  return __drivercount;
}

- (void) setDrivercount: (int32_t) drivercount {
  __drivercount = drivercount;
  __drivercount_isset = YES;
}

- (BOOL) drivercountIsSet {
  return __drivercount_isset;
}

- (void) unsetDrivercount {
  __drivercount_isset = NO;
}

- (int32_t) state {
  return __state;
}

- (void) setState: (int32_t) state {
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  __state_isset = NO;
}

- (NSData *) picture {
  return [[__picture retain_stub] autorelease_stub];
}

- (void) setPicture: (NSData *) picture {
  [picture retain_stub];
  [__picture release_stub];
  __picture = picture;
  __picture_isset = YES;
}

- (BOOL) pictureIsSet {
  return __picture_isset;
}

- (void) unsetPicture {
  [__picture release_stub];
  __picture = nil;
  __picture_isset = NO;
}

- (int32_t) pictype {
  return __pictype;
}

- (void) setPictype: (int32_t) pictype {
  __pictype = pictype;
  __pictype_isset = YES;
}

- (BOOL) pictypeIsSet {
  return __pictype_isset;
}

- (void) unsetPictype {
  __pictype_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (BOOL) sex {
  return __sex;
}

- (void) setSex: (BOOL) sex {
  __sex = sex;
  __sex_isset = YES;
}

- (BOOL) sexIsSet {
  return __sex_isset;
}

- (void) unsetSex {
  __sex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDriverid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScore: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDrivercard: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDriveage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setProvince: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDrivercount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setPicture: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPictype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Driver"];
  if (__driverid_isset) {
    [outProtocol writeFieldBeginWithName: @"driverid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __driverid];
    [outProtocol writeFieldEnd];
  }
  if (__mobile_isset) {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __mobile];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__score_isset) {
    [outProtocol writeFieldBeginWithName: @"score" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __score];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__drivercard_isset) {
    if (__drivercard != nil) {
      [outProtocol writeFieldBeginWithName: @"drivercard" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __drivercard];
      [outProtocol writeFieldEnd];
    }
  }
  if (__driveage_isset) {
    [outProtocol writeFieldBeginWithName: @"driveage" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __driveage];
    [outProtocol writeFieldEnd];
  }
  if (__province_isset) {
    if (__province != nil) {
      [outProtocol writeFieldBeginWithName: @"province" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __province];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drivercount_isset) {
    [outProtocol writeFieldBeginWithName: @"drivercount" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __drivercount];
    [outProtocol writeFieldEnd];
  }
  if (__state_isset) {
    [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __state];
    [outProtocol writeFieldEnd];
  }
  if (__picture_isset) {
    if (__picture != nil) {
      [outProtocol writeFieldBeginWithName: @"picture" type: TType_STRING fieldID: 12];
      [outProtocol writeBinary: __picture];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pictype_isset) {
    [outProtocol writeFieldBeginWithName: @"pictype" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __pictype];
    [outProtocol writeFieldEnd];
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sex_isset) {
    [outProtocol writeFieldBeginWithName: @"sex" type: TType_BOOL fieldID: 15];
    [outProtocol writeBool: __sex];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Driver("];
  [ms appendString: @"driverid:"];
  [ms appendFormat: @"%qi", __driverid];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"%qi", __mobile];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",score:"];
  [ms appendFormat: @"%i", __score];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",drivercard:"];
  [ms appendFormat: @"\"%@\"", __drivercard];
  [ms appendString: @",driveage:"];
  [ms appendFormat: @"%i", __driveage];
  [ms appendString: @",province:"];
  [ms appendFormat: @"\"%@\"", __province];
  [ms appendString: @",drivercount:"];
  [ms appendFormat: @"%i", __drivercount];
  [ms appendString: @",state:"];
  [ms appendFormat: @"%i", __state];
  [ms appendString: @",picture:"];
  [ms appendFormat: @"\"%@\"", __picture];
  [ms appendString: @",pictype:"];
  [ms appendFormat: @"%i", __pictype];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",sex:"];
  [ms appendFormat: @"%i", __sex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Order

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOrderid: (int32_t) orderid customermobile: (int64_t) customermobile customername: (NSString *) customername createtime: (int64_t) createtime pretime: (int64_t) pretime preaddress: (NSString *) preaddress drivercount: (int32_t) drivercount parentorderid: (int32_t) parentorderid orderstate: (int32_t) orderstate
{
  self = [super init];
  __orderid = orderid;
  __orderid_isset = YES;
  __customermobile = customermobile;
  __customermobile_isset = YES;
  __customername = [customername retain_stub];
  __customername_isset = YES;
  __createtime = createtime;
  __createtime_isset = YES;
  __pretime = pretime;
  __pretime_isset = YES;
  __preaddress = [preaddress retain_stub];
  __preaddress_isset = YES;
  __drivercount = drivercount;
  __drivercount_isset = YES;
  __parentorderid = parentorderid;
  __parentorderid_isset = YES;
  __orderstate = orderstate;
  __orderstate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"orderid"])
  {
    __orderid = [decoder decodeInt32ForKey: @"orderid"];
    __orderid_isset = YES;
  }
  if ([decoder containsValueForKey: @"customermobile"])
  {
    __customermobile = [decoder decodeInt64ForKey: @"customermobile"];
    __customermobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"customername"])
  {
    __customername = [[decoder decodeObjectForKey: @"customername"] retain_stub];
    __customername_isset = YES;
  }
  if ([decoder containsValueForKey: @"createtime"])
  {
    __createtime = [decoder decodeInt64ForKey: @"createtime"];
    __createtime_isset = YES;
  }
  if ([decoder containsValueForKey: @"pretime"])
  {
    __pretime = [decoder decodeInt64ForKey: @"pretime"];
    __pretime_isset = YES;
  }
  if ([decoder containsValueForKey: @"preaddress"])
  {
    __preaddress = [[decoder decodeObjectForKey: @"preaddress"] retain_stub];
    __preaddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"drivercount"])
  {
    __drivercount = [decoder decodeInt32ForKey: @"drivercount"];
    __drivercount_isset = YES;
  }
  if ([decoder containsValueForKey: @"parentorderid"])
  {
    __parentorderid = [decoder decodeInt32ForKey: @"parentorderid"];
    __parentorderid_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderstate"])
  {
    __orderstate = [decoder decodeInt32ForKey: @"orderstate"];
    __orderstate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__orderid_isset)
  {
    [encoder encodeInt32: __orderid forKey: @"orderid"];
  }
  if (__customermobile_isset)
  {
    [encoder encodeInt64: __customermobile forKey: @"customermobile"];
  }
  if (__customername_isset)
  {
    [encoder encodeObject: __customername forKey: @"customername"];
  }
  if (__createtime_isset)
  {
    [encoder encodeInt64: __createtime forKey: @"createtime"];
  }
  if (__pretime_isset)
  {
    [encoder encodeInt64: __pretime forKey: @"pretime"];
  }
  if (__preaddress_isset)
  {
    [encoder encodeObject: __preaddress forKey: @"preaddress"];
  }
  if (__drivercount_isset)
  {
    [encoder encodeInt32: __drivercount forKey: @"drivercount"];
  }
  if (__parentorderid_isset)
  {
    [encoder encodeInt32: __parentorderid forKey: @"parentorderid"];
  }
  if (__orderstate_isset)
  {
    [encoder encodeInt32: __orderstate forKey: @"orderstate"];
  }
}

- (void) dealloc
{
  [__customername release_stub];
  [__preaddress release_stub];
  [super dealloc_stub];
}

- (int32_t) orderid {
  return __orderid;
}

- (void) setOrderid: (int32_t) orderid {
  __orderid = orderid;
  __orderid_isset = YES;
}

- (BOOL) orderidIsSet {
  return __orderid_isset;
}

- (void) unsetOrderid {
  __orderid_isset = NO;
}

- (int64_t) customermobile {
  return __customermobile;
}

- (void) setCustomermobile: (int64_t) customermobile {
  __customermobile = customermobile;
  __customermobile_isset = YES;
}

- (BOOL) customermobileIsSet {
  return __customermobile_isset;
}

- (void) unsetCustomermobile {
  __customermobile_isset = NO;
}

- (NSString *) customername {
  return [[__customername retain_stub] autorelease_stub];
}

- (void) setCustomername: (NSString *) customername {
  [customername retain_stub];
  [__customername release_stub];
  __customername = customername;
  __customername_isset = YES;
}

- (BOOL) customernameIsSet {
  return __customername_isset;
}

- (void) unsetCustomername {
  [__customername release_stub];
  __customername = nil;
  __customername_isset = NO;
}

- (int64_t) createtime {
  return __createtime;
}

- (void) setCreatetime: (int64_t) createtime {
  __createtime = createtime;
  __createtime_isset = YES;
}

- (BOOL) createtimeIsSet {
  return __createtime_isset;
}

- (void) unsetCreatetime {
  __createtime_isset = NO;
}

- (int64_t) pretime {
  return __pretime;
}

- (void) setPretime: (int64_t) pretime {
  __pretime = pretime;
  __pretime_isset = YES;
}

- (BOOL) pretimeIsSet {
  return __pretime_isset;
}

- (void) unsetPretime {
  __pretime_isset = NO;
}

- (NSString *) preaddress {
  return [[__preaddress retain_stub] autorelease_stub];
}

- (void) setPreaddress: (NSString *) preaddress {
  [preaddress retain_stub];
  [__preaddress release_stub];
  __preaddress = preaddress;
  __preaddress_isset = YES;
}

- (BOOL) preaddressIsSet {
  return __preaddress_isset;
}

- (void) unsetPreaddress {
  [__preaddress release_stub];
  __preaddress = nil;
  __preaddress_isset = NO;
}

- (int32_t) drivercount {
  return __drivercount;
}

- (void) setDrivercount: (int32_t) drivercount {
  __drivercount = drivercount;
  __drivercount_isset = YES;
}

- (BOOL) drivercountIsSet {
  return __drivercount_isset;
}

- (void) unsetDrivercount {
  __drivercount_isset = NO;
}

- (int32_t) parentorderid {
  return __parentorderid;
}

- (void) setParentorderid: (int32_t) parentorderid {
  __parentorderid = parentorderid;
  __parentorderid_isset = YES;
}

- (BOOL) parentorderidIsSet {
  return __parentorderid_isset;
}

- (void) unsetParentorderid {
  __parentorderid_isset = NO;
}

- (int32_t) orderstate {
  return __orderstate;
}

- (void) setOrderstate: (int32_t) orderstate {
  __orderstate = orderstate;
  __orderstate_isset = YES;
}

- (BOOL) orderstateIsSet {
  return __orderstate_isset;
}

- (void) unsetOrderstate {
  __orderstate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOrderid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCustomermobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCustomername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreatetime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPretime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPreaddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDrivercount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setParentorderid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOrderstate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Order"];
  if (__orderid_isset) {
    [outProtocol writeFieldBeginWithName: @"orderid" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __orderid];
    [outProtocol writeFieldEnd];
  }
  if (__customermobile_isset) {
    [outProtocol writeFieldBeginWithName: @"customermobile" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __customermobile];
    [outProtocol writeFieldEnd];
  }
  if (__customername_isset) {
    if (__customername != nil) {
      [outProtocol writeFieldBeginWithName: @"customername" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __customername];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createtime_isset) {
    [outProtocol writeFieldBeginWithName: @"createtime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __createtime];
    [outProtocol writeFieldEnd];
  }
  if (__pretime_isset) {
    [outProtocol writeFieldBeginWithName: @"pretime" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __pretime];
    [outProtocol writeFieldEnd];
  }
  if (__preaddress_isset) {
    if (__preaddress != nil) {
      [outProtocol writeFieldBeginWithName: @"preaddress" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __preaddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__drivercount_isset) {
    [outProtocol writeFieldBeginWithName: @"drivercount" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __drivercount];
    [outProtocol writeFieldEnd];
  }
  if (__parentorderid_isset) {
    [outProtocol writeFieldBeginWithName: @"parentorderid" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __parentorderid];
    [outProtocol writeFieldEnd];
  }
  if (__orderstate_isset) {
    [outProtocol writeFieldBeginWithName: @"orderstate" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __orderstate];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Order("];
  [ms appendString: @"orderid:"];
  [ms appendFormat: @"%i", __orderid];
  [ms appendString: @",customermobile:"];
  [ms appendFormat: @"%qi", __customermobile];
  [ms appendString: @",customername:"];
  [ms appendFormat: @"\"%@\"", __customername];
  [ms appendString: @",createtime:"];
  [ms appendFormat: @"%qi", __createtime];
  [ms appendString: @",pretime:"];
  [ms appendFormat: @"%qi", __pretime];
  [ms appendString: @",preaddress:"];
  [ms appendFormat: @"\"%@\"", __preaddress];
  [ms appendString: @",drivercount:"];
  [ms appendFormat: @"%i", __drivercount];
  [ms appendString: @",parentorderid:"];
  [ms appendFormat: @"%i", __parentorderid];
  [ms appendString: @",orderstate:"];
  [ms appendFormat: @"%i", __orderstate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Comment

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMobile: (int64_t) mobile level: (int32_t) level message: (NSString *) message createtime: (int64_t) createtime
{
  self = [super init];
  __mobile = mobile;
  __mobile_isset = YES;
  __level = level;
  __level_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  __createtime = createtime;
  __createtime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [decoder decodeInt64ForKey: @"mobile"];
    __mobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"level"])
  {
    __level = [decoder decodeInt32ForKey: @"level"];
    __level_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  if ([decoder containsValueForKey: @"createtime"])
  {
    __createtime = [decoder decodeInt64ForKey: @"createtime"];
    __createtime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mobile_isset)
  {
    [encoder encodeInt64: __mobile forKey: @"mobile"];
  }
  if (__level_isset)
  {
    [encoder encodeInt32: __level forKey: @"level"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
  if (__createtime_isset)
  {
    [encoder encodeInt64: __createtime forKey: @"createtime"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int64_t) mobile {
  return __mobile;
}

- (void) setMobile: (int64_t) mobile {
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  __mobile_isset = NO;
}

- (int32_t) level {
  return __level;
}

- (void) setLevel: (int32_t) level {
  __level = level;
  __level_isset = YES;
}

- (BOOL) levelIsSet {
  return __level_isset;
}

- (void) unsetLevel {
  __level_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (int64_t) createtime {
  return __createtime;
}

- (void) setCreatetime: (int64_t) createtime {
  __createtime = createtime;
  __createtime_isset = YES;
}

- (BOOL) createtimeIsSet {
  return __createtime_isset;
}

- (void) unsetCreatetime {
  __createtime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreatetime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Comment"];
  if (__mobile_isset) {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __mobile];
    [outProtocol writeFieldEnd];
  }
  if (__level_isset) {
    [outProtocol writeFieldBeginWithName: @"level" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __level];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createtime_isset) {
    [outProtocol writeFieldBeginWithName: @"createtime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __createtime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Comment("];
  [ms appendString: @"mobile:"];
  [ms appendFormat: @"%qi", __mobile];
  [ms appendString: @",level:"];
  [ms appendFormat: @"%i", __level];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @",createtime:"];
  [ms appendFormat: @"%qi", __createtime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Appversion

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithVersion: (double) version downurl: (NSString *) downurl remark: (NSString *) remark
{
  self = [super init];
  __version = version;
  __version_isset = YES;
  __downurl = [downurl retain_stub];
  __downurl_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [decoder decodeDoubleForKey: @"version"];
    __version_isset = YES;
  }
  if ([decoder containsValueForKey: @"downurl"])
  {
    __downurl = [[decoder decodeObjectForKey: @"downurl"] retain_stub];
    __downurl_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__version_isset)
  {
    [encoder encodeDouble: __version forKey: @"version"];
  }
  if (__downurl_isset)
  {
    [encoder encodeObject: __downurl forKey: @"downurl"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
}

- (void) dealloc
{
  [__downurl release_stub];
  [__remark release_stub];
  [super dealloc_stub];
}

- (double) version {
  return __version;
}

- (void) setVersion: (double) version {
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  __version_isset = NO;
}

- (NSString *) downurl {
  return [[__downurl retain_stub] autorelease_stub];
}

- (void) setDownurl: (NSString *) downurl {
  [downurl retain_stub];
  [__downurl release_stub];
  __downurl = downurl;
  __downurl_isset = YES;
}

- (BOOL) downurlIsSet {
  return __downurl_isset;
}

- (void) unsetDownurl {
  [__downurl release_stub];
  __downurl = nil;
  __downurl_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDownurl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Appversion"];
  if (__version_isset) {
    [outProtocol writeFieldBeginWithName: @"version" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __version];
    [outProtocol writeFieldEnd];
  }
  if (__downurl_isset) {
    if (__downurl != nil) {
      [outProtocol writeFieldBeginWithName: @"downurl" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __downurl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Appversion("];
  [ms appendString: @"version:"];
  [ms appendFormat: @"%f", __version];
  [ms appendString: @",downurl:"];
  [ms appendFormat: @"\"%@\"", __downurl];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Notification

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id title: (NSString *) title createtime: (int64_t) createtime message: (NSString *) message
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __createtime = createtime;
  __createtime_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"createtime"])
  {
    __createtime = [decoder decodeInt64ForKey: @"createtime"];
    __createtime_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__createtime_isset)
  {
    [encoder encodeInt64: __createtime forKey: @"createtime"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__title release_stub];
  [__message release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (int64_t) createtime {
  return __createtime;
}

- (void) setCreatetime: (int64_t) createtime {
  __createtime = createtime;
  __createtime_isset = YES;
}

- (BOOL) createtimeIsSet {
  return __createtime_isset;
}

- (void) unsetCreatetime {
  __createtime_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreatetime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Notification"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__createtime_isset) {
    [outProtocol writeFieldBeginWithName: @"createtime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __createtime];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Notification("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",createtime:"];
  [ms appendFormat: @"%qi", __createtime];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation reportorder

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithOrderid: (int32_t) orderid paperid: (NSString *) paperid customername: (NSString *) customername carno: (NSString *) carno starttime: (int64_t) starttime endtime: (int64_t) endtime waitminutes: (int32_t) waitminutes startaddress: (NSString *) startaddress endaddress: (NSString *) endaddress distance: (int32_t) distance totalamount: (double) totalamount vipamount: (double) vipamount coupon: (double) coupon cash: (double) cash invoice: (int32_t) invoice remark: (NSString *) remark complaint: (BOOL) complaint canceltype: (int32_t) canceltype come: (int32_t) come pretime: (int64_t) pretime customermobile: (int64_t) customermobile
{
  self = [super init];
  __orderid = orderid;
  __orderid_isset = YES;
  __paperid = [paperid retain_stub];
  __paperid_isset = YES;
  __customername = [customername retain_stub];
  __customername_isset = YES;
  __carno = [carno retain_stub];
  __carno_isset = YES;
  __starttime = starttime;
  __starttime_isset = YES;
  __endtime = endtime;
  __endtime_isset = YES;
  __waitminutes = waitminutes;
  __waitminutes_isset = YES;
  __startaddress = [startaddress retain_stub];
  __startaddress_isset = YES;
  __endaddress = [endaddress retain_stub];
  __endaddress_isset = YES;
  __distance = distance;
  __distance_isset = YES;
  __totalamount = totalamount;
  __totalamount_isset = YES;
  __vipamount = vipamount;
  __vipamount_isset = YES;
  __coupon = coupon;
  __coupon_isset = YES;
  __cash = cash;
  __cash_isset = YES;
  __invoice = invoice;
  __invoice_isset = YES;
  __remark = [remark retain_stub];
  __remark_isset = YES;
  __complaint = complaint;
  __complaint_isset = YES;
  __canceltype = canceltype;
  __canceltype_isset = YES;
  __come = come;
  __come_isset = YES;
  __pretime = pretime;
  __pretime_isset = YES;
  __customermobile = customermobile;
  __customermobile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"orderid"])
  {
    __orderid = [decoder decodeInt32ForKey: @"orderid"];
    __orderid_isset = YES;
  }
  if ([decoder containsValueForKey: @"paperid"])
  {
    __paperid = [[decoder decodeObjectForKey: @"paperid"] retain_stub];
    __paperid_isset = YES;
  }
  if ([decoder containsValueForKey: @"customername"])
  {
    __customername = [[decoder decodeObjectForKey: @"customername"] retain_stub];
    __customername_isset = YES;
  }
  if ([decoder containsValueForKey: @"carno"])
  {
    __carno = [[decoder decodeObjectForKey: @"carno"] retain_stub];
    __carno_isset = YES;
  }
  if ([decoder containsValueForKey: @"starttime"])
  {
    __starttime = [decoder decodeInt64ForKey: @"starttime"];
    __starttime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endtime"])
  {
    __endtime = [decoder decodeInt64ForKey: @"endtime"];
    __endtime_isset = YES;
  }
  if ([decoder containsValueForKey: @"waitminutes"])
  {
    __waitminutes = [decoder decodeInt32ForKey: @"waitminutes"];
    __waitminutes_isset = YES;
  }
  if ([decoder containsValueForKey: @"startaddress"])
  {
    __startaddress = [[decoder decodeObjectForKey: @"startaddress"] retain_stub];
    __startaddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"endaddress"])
  {
    __endaddress = [[decoder decodeObjectForKey: @"endaddress"] retain_stub];
    __endaddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"distance"])
  {
    __distance = [decoder decodeInt32ForKey: @"distance"];
    __distance_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalamount"])
  {
    __totalamount = [decoder decodeDoubleForKey: @"totalamount"];
    __totalamount_isset = YES;
  }
  if ([decoder containsValueForKey: @"vipamount"])
  {
    __vipamount = [decoder decodeDoubleForKey: @"vipamount"];
    __vipamount_isset = YES;
  }
  if ([decoder containsValueForKey: @"coupon"])
  {
    __coupon = [decoder decodeDoubleForKey: @"coupon"];
    __coupon_isset = YES;
  }
  if ([decoder containsValueForKey: @"cash"])
  {
    __cash = [decoder decodeDoubleForKey: @"cash"];
    __cash_isset = YES;
  }
  if ([decoder containsValueForKey: @"invoice"])
  {
    __invoice = [decoder decodeInt32ForKey: @"invoice"];
    __invoice_isset = YES;
  }
  if ([decoder containsValueForKey: @"remark"])
  {
    __remark = [[decoder decodeObjectForKey: @"remark"] retain_stub];
    __remark_isset = YES;
  }
  if ([decoder containsValueForKey: @"complaint"])
  {
    __complaint = [decoder decodeBoolForKey: @"complaint"];
    __complaint_isset = YES;
  }
  if ([decoder containsValueForKey: @"canceltype"])
  {
    __canceltype = [decoder decodeInt32ForKey: @"canceltype"];
    __canceltype_isset = YES;
  }
  if ([decoder containsValueForKey: @"come"])
  {
    __come = [decoder decodeInt32ForKey: @"come"];
    __come_isset = YES;
  }
  if ([decoder containsValueForKey: @"pretime"])
  {
    __pretime = [decoder decodeInt64ForKey: @"pretime"];
    __pretime_isset = YES;
  }
  if ([decoder containsValueForKey: @"customermobile"])
  {
    __customermobile = [decoder decodeInt64ForKey: @"customermobile"];
    __customermobile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__orderid_isset)
  {
    [encoder encodeInt32: __orderid forKey: @"orderid"];
  }
  if (__paperid_isset)
  {
    [encoder encodeObject: __paperid forKey: @"paperid"];
  }
  if (__customername_isset)
  {
    [encoder encodeObject: __customername forKey: @"customername"];
  }
  if (__carno_isset)
  {
    [encoder encodeObject: __carno forKey: @"carno"];
  }
  if (__starttime_isset)
  {
    [encoder encodeInt64: __starttime forKey: @"starttime"];
  }
  if (__endtime_isset)
  {
    [encoder encodeInt64: __endtime forKey: @"endtime"];
  }
  if (__waitminutes_isset)
  {
    [encoder encodeInt32: __waitminutes forKey: @"waitminutes"];
  }
  if (__startaddress_isset)
  {
    [encoder encodeObject: __startaddress forKey: @"startaddress"];
  }
  if (__endaddress_isset)
  {
    [encoder encodeObject: __endaddress forKey: @"endaddress"];
  }
  if (__distance_isset)
  {
    [encoder encodeInt32: __distance forKey: @"distance"];
  }
  if (__totalamount_isset)
  {
    [encoder encodeDouble: __totalamount forKey: @"totalamount"];
  }
  if (__vipamount_isset)
  {
    [encoder encodeDouble: __vipamount forKey: @"vipamount"];
  }
  if (__coupon_isset)
  {
    [encoder encodeDouble: __coupon forKey: @"coupon"];
  }
  if (__cash_isset)
  {
    [encoder encodeDouble: __cash forKey: @"cash"];
  }
  if (__invoice_isset)
  {
    [encoder encodeInt32: __invoice forKey: @"invoice"];
  }
  if (__remark_isset)
  {
    [encoder encodeObject: __remark forKey: @"remark"];
  }
  if (__complaint_isset)
  {
    [encoder encodeBool: __complaint forKey: @"complaint"];
  }
  if (__canceltype_isset)
  {
    [encoder encodeInt32: __canceltype forKey: @"canceltype"];
  }
  if (__come_isset)
  {
    [encoder encodeInt32: __come forKey: @"come"];
  }
  if (__pretime_isset)
  {
    [encoder encodeInt64: __pretime forKey: @"pretime"];
  }
  if (__customermobile_isset)
  {
    [encoder encodeInt64: __customermobile forKey: @"customermobile"];
  }
}

- (void) dealloc
{
  [__paperid release_stub];
  [__customername release_stub];
  [__carno release_stub];
  [__startaddress release_stub];
  [__endaddress release_stub];
  [__remark release_stub];
  [super dealloc_stub];
}

- (int32_t) orderid {
  return __orderid;
}

- (void) setOrderid: (int32_t) orderid {
  __orderid = orderid;
  __orderid_isset = YES;
}

- (BOOL) orderidIsSet {
  return __orderid_isset;
}

- (void) unsetOrderid {
  __orderid_isset = NO;
}

- (NSString *) paperid {
  return [[__paperid retain_stub] autorelease_stub];
}

- (void) setPaperid: (NSString *) paperid {
  [paperid retain_stub];
  [__paperid release_stub];
  __paperid = paperid;
  __paperid_isset = YES;
}

- (BOOL) paperidIsSet {
  return __paperid_isset;
}

- (void) unsetPaperid {
  [__paperid release_stub];
  __paperid = nil;
  __paperid_isset = NO;
}

- (NSString *) customername {
  return [[__customername retain_stub] autorelease_stub];
}

- (void) setCustomername: (NSString *) customername {
  [customername retain_stub];
  [__customername release_stub];
  __customername = customername;
  __customername_isset = YES;
}

- (BOOL) customernameIsSet {
  return __customername_isset;
}

- (void) unsetCustomername {
  [__customername release_stub];
  __customername = nil;
  __customername_isset = NO;
}

- (NSString *) carno {
  return [[__carno retain_stub] autorelease_stub];
}

- (void) setCarno: (NSString *) carno {
  [carno retain_stub];
  [__carno release_stub];
  __carno = carno;
  __carno_isset = YES;
}

- (BOOL) carnoIsSet {
  return __carno_isset;
}

- (void) unsetCarno {
  [__carno release_stub];
  __carno = nil;
  __carno_isset = NO;
}

- (int64_t) starttime {
  return __starttime;
}

- (void) setStarttime: (int64_t) starttime {
  __starttime = starttime;
  __starttime_isset = YES;
}

- (BOOL) starttimeIsSet {
  return __starttime_isset;
}

- (void) unsetStarttime {
  __starttime_isset = NO;
}

- (int64_t) endtime {
  return __endtime;
}

- (void) setEndtime: (int64_t) endtime {
  __endtime = endtime;
  __endtime_isset = YES;
}

- (BOOL) endtimeIsSet {
  return __endtime_isset;
}

- (void) unsetEndtime {
  __endtime_isset = NO;
}

- (int32_t) waitminutes {
  return __waitminutes;
}

- (void) setWaitminutes: (int32_t) waitminutes {
  __waitminutes = waitminutes;
  __waitminutes_isset = YES;
}

- (BOOL) waitminutesIsSet {
  return __waitminutes_isset;
}

- (void) unsetWaitminutes {
  __waitminutes_isset = NO;
}

- (NSString *) startaddress {
  return [[__startaddress retain_stub] autorelease_stub];
}

- (void) setStartaddress: (NSString *) startaddress {
  [startaddress retain_stub];
  [__startaddress release_stub];
  __startaddress = startaddress;
  __startaddress_isset = YES;
}

- (BOOL) startaddressIsSet {
  return __startaddress_isset;
}

- (void) unsetStartaddress {
  [__startaddress release_stub];
  __startaddress = nil;
  __startaddress_isset = NO;
}

- (NSString *) endaddress {
  return [[__endaddress retain_stub] autorelease_stub];
}

- (void) setEndaddress: (NSString *) endaddress {
  [endaddress retain_stub];
  [__endaddress release_stub];
  __endaddress = endaddress;
  __endaddress_isset = YES;
}

- (BOOL) endaddressIsSet {
  return __endaddress_isset;
}

- (void) unsetEndaddress {
  [__endaddress release_stub];
  __endaddress = nil;
  __endaddress_isset = NO;
}

- (int32_t) distance {
  return __distance;
}

- (void) setDistance: (int32_t) distance {
  __distance = distance;
  __distance_isset = YES;
}

- (BOOL) distanceIsSet {
  return __distance_isset;
}

- (void) unsetDistance {
  __distance_isset = NO;
}

- (double) totalamount {
  return __totalamount;
}

- (void) setTotalamount: (double) totalamount {
  __totalamount = totalamount;
  __totalamount_isset = YES;
}

- (BOOL) totalamountIsSet {
  return __totalamount_isset;
}

- (void) unsetTotalamount {
  __totalamount_isset = NO;
}

- (double) vipamount {
  return __vipamount;
}

- (void) setVipamount: (double) vipamount {
  __vipamount = vipamount;
  __vipamount_isset = YES;
}

- (BOOL) vipamountIsSet {
  return __vipamount_isset;
}

- (void) unsetVipamount {
  __vipamount_isset = NO;
}

- (double) coupon {
  return __coupon;
}

- (void) setCoupon: (double) coupon {
  __coupon = coupon;
  __coupon_isset = YES;
}

- (BOOL) couponIsSet {
  return __coupon_isset;
}

- (void) unsetCoupon {
  __coupon_isset = NO;
}

- (double) cash {
  return __cash;
}

- (void) setCash: (double) cash {
  __cash = cash;
  __cash_isset = YES;
}

- (BOOL) cashIsSet {
  return __cash_isset;
}

- (void) unsetCash {
  __cash_isset = NO;
}

- (int32_t) invoice {
  return __invoice;
}

- (void) setInvoice: (int32_t) invoice {
  __invoice = invoice;
  __invoice_isset = YES;
}

- (BOOL) invoiceIsSet {
  return __invoice_isset;
}

- (void) unsetInvoice {
  __invoice_isset = NO;
}

- (NSString *) remark {
  return [[__remark retain_stub] autorelease_stub];
}

- (void) setRemark: (NSString *) remark {
  [remark retain_stub];
  [__remark release_stub];
  __remark = remark;
  __remark_isset = YES;
}

- (BOOL) remarkIsSet {
  return __remark_isset;
}

- (void) unsetRemark {
  [__remark release_stub];
  __remark = nil;
  __remark_isset = NO;
}

- (BOOL) complaint {
  return __complaint;
}

- (void) setComplaint: (BOOL) complaint {
  __complaint = complaint;
  __complaint_isset = YES;
}

- (BOOL) complaintIsSet {
  return __complaint_isset;
}

- (void) unsetComplaint {
  __complaint_isset = NO;
}

- (int32_t) canceltype {
  return __canceltype;
}

- (void) setCanceltype: (int32_t) canceltype {
  __canceltype = canceltype;
  __canceltype_isset = YES;
}

- (BOOL) canceltypeIsSet {
  return __canceltype_isset;
}

- (void) unsetCanceltype {
  __canceltype_isset = NO;
}

- (int32_t) come {
  return __come;
}

- (void) setCome: (int32_t) come {
  __come = come;
  __come_isset = YES;
}

- (BOOL) comeIsSet {
  return __come_isset;
}

- (void) unsetCome {
  __come_isset = NO;
}

- (int64_t) pretime {
  return __pretime;
}

- (void) setPretime: (int64_t) pretime {
  __pretime = pretime;
  __pretime_isset = YES;
}

- (BOOL) pretimeIsSet {
  return __pretime_isset;
}

- (void) unsetPretime {
  __pretime_isset = NO;
}

- (int64_t) customermobile {
  return __customermobile;
}

- (void) setCustomermobile: (int64_t) customermobile {
  __customermobile = customermobile;
  __customermobile_isset = YES;
}

- (BOOL) customermobileIsSet {
  return __customermobile_isset;
}

- (void) unsetCustomermobile {
  __customermobile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOrderid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPaperid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCustomername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCarno: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStarttime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEndtime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWaitminutes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStartaddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEndaddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDistance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTotalamount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setVipamount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setCoupon: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setCash: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setInvoice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRemark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setComplaint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCanceltype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCome: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPretime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCustomermobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"reportorder"];
  if (__orderid_isset) {
    [outProtocol writeFieldBeginWithName: @"orderid" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __orderid];
    [outProtocol writeFieldEnd];
  }
  if (__paperid_isset) {
    if (__paperid != nil) {
      [outProtocol writeFieldBeginWithName: @"paperid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __paperid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__customername_isset) {
    if (__customername != nil) {
      [outProtocol writeFieldBeginWithName: @"customername" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __customername];
      [outProtocol writeFieldEnd];
    }
  }
  if (__carno_isset) {
    if (__carno != nil) {
      [outProtocol writeFieldBeginWithName: @"carno" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __carno];
      [outProtocol writeFieldEnd];
    }
  }
  if (__starttime_isset) {
    [outProtocol writeFieldBeginWithName: @"starttime" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __starttime];
    [outProtocol writeFieldEnd];
  }
  if (__endtime_isset) {
    [outProtocol writeFieldBeginWithName: @"endtime" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __endtime];
    [outProtocol writeFieldEnd];
  }
  if (__waitminutes_isset) {
    [outProtocol writeFieldBeginWithName: @"waitminutes" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __waitminutes];
    [outProtocol writeFieldEnd];
  }
  if (__startaddress_isset) {
    if (__startaddress != nil) {
      [outProtocol writeFieldBeginWithName: @"startaddress" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __startaddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__endaddress_isset) {
    if (__endaddress != nil) {
      [outProtocol writeFieldBeginWithName: @"endaddress" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __endaddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__distance_isset) {
    [outProtocol writeFieldBeginWithName: @"distance" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __distance];
    [outProtocol writeFieldEnd];
  }
  if (__totalamount_isset) {
    [outProtocol writeFieldBeginWithName: @"totalamount" type: TType_DOUBLE fieldID: 11];
    [outProtocol writeDouble: __totalamount];
    [outProtocol writeFieldEnd];
  }
  if (__vipamount_isset) {
    [outProtocol writeFieldBeginWithName: @"vipamount" type: TType_DOUBLE fieldID: 12];
    [outProtocol writeDouble: __vipamount];
    [outProtocol writeFieldEnd];
  }
  if (__coupon_isset) {
    [outProtocol writeFieldBeginWithName: @"coupon" type: TType_DOUBLE fieldID: 13];
    [outProtocol writeDouble: __coupon];
    [outProtocol writeFieldEnd];
  }
  if (__cash_isset) {
    [outProtocol writeFieldBeginWithName: @"cash" type: TType_DOUBLE fieldID: 14];
    [outProtocol writeDouble: __cash];
    [outProtocol writeFieldEnd];
  }
  if (__invoice_isset) {
    [outProtocol writeFieldBeginWithName: @"invoice" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __invoice];
    [outProtocol writeFieldEnd];
  }
  if (__remark_isset) {
    if (__remark != nil) {
      [outProtocol writeFieldBeginWithName: @"remark" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __remark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__complaint_isset) {
    [outProtocol writeFieldBeginWithName: @"complaint" type: TType_BOOL fieldID: 17];
    [outProtocol writeBool: __complaint];
    [outProtocol writeFieldEnd];
  }
  if (__canceltype_isset) {
    [outProtocol writeFieldBeginWithName: @"canceltype" type: TType_I32 fieldID: 18];
    [outProtocol writeI32: __canceltype];
    [outProtocol writeFieldEnd];
  }
  if (__come_isset) {
    [outProtocol writeFieldBeginWithName: @"come" type: TType_I32 fieldID: 19];
    [outProtocol writeI32: __come];
    [outProtocol writeFieldEnd];
  }
  if (__pretime_isset) {
    [outProtocol writeFieldBeginWithName: @"pretime" type: TType_I64 fieldID: 20];
    [outProtocol writeI64: __pretime];
    [outProtocol writeFieldEnd];
  }
  if (__customermobile_isset) {
    [outProtocol writeFieldBeginWithName: @"customermobile" type: TType_I64 fieldID: 21];
    [outProtocol writeI64: __customermobile];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"reportorder("];
  [ms appendString: @"orderid:"];
  [ms appendFormat: @"%i", __orderid];
  [ms appendString: @",paperid:"];
  [ms appendFormat: @"\"%@\"", __paperid];
  [ms appendString: @",customername:"];
  [ms appendFormat: @"\"%@\"", __customername];
  [ms appendString: @",carno:"];
  [ms appendFormat: @"\"%@\"", __carno];
  [ms appendString: @",starttime:"];
  [ms appendFormat: @"%qi", __starttime];
  [ms appendString: @",endtime:"];
  [ms appendFormat: @"%qi", __endtime];
  [ms appendString: @",waitminutes:"];
  [ms appendFormat: @"%i", __waitminutes];
  [ms appendString: @",startaddress:"];
  [ms appendFormat: @"\"%@\"", __startaddress];
  [ms appendString: @",endaddress:"];
  [ms appendFormat: @"\"%@\"", __endaddress];
  [ms appendString: @",distance:"];
  [ms appendFormat: @"%i", __distance];
  [ms appendString: @",totalamount:"];
  [ms appendFormat: @"%f", __totalamount];
  [ms appendString: @",vipamount:"];
  [ms appendFormat: @"%f", __vipamount];
  [ms appendString: @",coupon:"];
  [ms appendFormat: @"%f", __coupon];
  [ms appendString: @",cash:"];
  [ms appendFormat: @"%f", __cash];
  [ms appendString: @",invoice:"];
  [ms appendFormat: @"%i", __invoice];
  [ms appendString: @",remark:"];
  [ms appendFormat: @"\"%@\"", __remark];
  [ms appendString: @",complaint:"];
  [ms appendFormat: @"%i", __complaint];
  [ms appendString: @",canceltype:"];
  [ms appendFormat: @"%i", __canceltype];
  [ms appendString: @",come:"];
  [ms appendFormat: @"%i", __come];
  [ms appendString: @",pretime:"];
  [ms appendFormat: @"%qi", __pretime];
  [ms appendString: @",customermobile:"];
  [ms appendFormat: @"%qi", __customermobile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation locationinfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLongitude: (double) longitude latitude: (double) latitude address: (NSString *) address orderid: (int32_t) orderid createtime: (int64_t) createtime
{
  self = [super init];
  __longitude = longitude;
  __longitude_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __orderid = orderid;
  __orderid_isset = YES;
  __createtime = createtime;
  __createtime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderid"])
  {
    __orderid = [decoder decodeInt32ForKey: @"orderid"];
    __orderid_isset = YES;
  }
  if ([decoder containsValueForKey: @"createtime"])
  {
    __createtime = [decoder decodeInt64ForKey: @"createtime"];
    __createtime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__orderid_isset)
  {
    [encoder encodeInt32: __orderid forKey: @"orderid"];
  }
  if (__createtime_isset)
  {
    [encoder encodeInt64: __createtime forKey: @"createtime"];
  }
}

- (void) dealloc
{
  [__address release_stub];
  [super dealloc_stub];
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (int32_t) orderid {
  return __orderid;
}

- (void) setOrderid: (int32_t) orderid {
  __orderid = orderid;
  __orderid_isset = YES;
}

- (BOOL) orderidIsSet {
  return __orderid_isset;
}

- (void) unsetOrderid {
  __orderid_isset = NO;
}

- (int64_t) createtime {
  return __createtime;
}

- (void) setCreatetime: (int64_t) createtime {
  __createtime = createtime;
  __createtime_isset = YES;
}

- (BOOL) createtimeIsSet {
  return __createtime_isset;
}

- (void) unsetCreatetime {
  __createtime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOrderid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreatetime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"locationinfo"];
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderid_isset) {
    [outProtocol writeFieldBeginWithName: @"orderid" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __orderid];
    [outProtocol writeFieldEnd];
  }
  if (__createtime_isset) {
    [outProtocol writeFieldBeginWithName: @"createtime" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __createtime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"locationinfo("];
  [ms appendString: @"longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",orderid:"];
  [ms appendFormat: @"%i", __orderid];
  [ms appendString: @",createtime:"];
  [ms appendFormat: @"%qi", __createtime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation zuoxinConstants
+ (void) initialize {
}
@end

@interface login_args : NSObject <NSCoding> {
  int64_t __driverid;
  NSString * __password;

  BOOL __driverid_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=driverid, setter=setDriverid:) int64_t driverid;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) init;
- (id) initWithDriverid: (int64_t) driverid password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int64_t) driverid;
- (void) setDriverid: (int64_t) driverid;
#endif
- (BOOL) driveridIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

@end

@implementation login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDriverid: (int64_t) driverid password: (NSString *) password
{
  self = [super init];
  __driverid = driverid;
  __driverid_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"driverid"])
  {
    __driverid = [decoder decodeInt64ForKey: @"driverid"];
    __driverid_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__driverid_isset)
  {
    [encoder encodeInt64: __driverid forKey: @"driverid"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__password release_stub];
  [super dealloc_stub];
}

- (int64_t) driverid {
  return __driverid;
}

- (void) setDriverid: (int64_t) driverid {
  __driverid = driverid;
  __driverid_isset = YES;
}

- (BOOL) driveridIsSet {
  return __driverid_isset;
}

- (void) unsetDriverid {
  __driverid_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDriverid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__driverid_isset) {
    [outProtocol writeFieldBeginWithName: @"driverid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __driverid];
    [outProtocol writeFieldEnd];
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"driverid:"];
  [ms appendFormat: @"%qi", __driverid];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface checkorder_args : NSObject <NSCoding> {
  NSString * __sessionid;

  BOOL __sessionid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

@end

@implementation checkorder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"checkorder_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"checkorder_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Checkorder_result : NSObject <NSCoding> {
  int32_t __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Checkorder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__ex release_stub];
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Checkorder_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Checkorder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface acceptorder_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int32_t __orderid;

  BOOL __sessionid_isset;
  BOOL __orderid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=orderid, setter=setOrderid:) int32_t orderid;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid orderid: (int32_t) orderid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int32_t) orderid;
- (void) setOrderid: (int32_t) orderid;
#endif
- (BOOL) orderidIsSet;

@end

@implementation acceptorder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid orderid: (int32_t) orderid
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __orderid = orderid;
  __orderid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderid"])
  {
    __orderid = [decoder decodeInt32ForKey: @"orderid"];
    __orderid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__orderid_isset)
  {
    [encoder encodeInt32: __orderid forKey: @"orderid"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int32_t) orderid {
  return __orderid;
}

- (void) setOrderid: (int32_t) orderid {
  __orderid = orderid;
  __orderid_isset = YES;
}

- (BOOL) orderidIsSet {
  return __orderid_isset;
}

- (void) unsetOrderid {
  __orderid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOrderid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"acceptorder_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderid_isset) {
    [outProtocol writeFieldBeginWithName: @"orderid" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __orderid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"acceptorder_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",orderid:"];
  [ms appendFormat: @"%i", __orderid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Acceptorder_result : NSObject <NSCoding> {
  Order * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Order * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (Order *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Order *) success;
- (void) setSuccess: (Order *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Acceptorder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Order *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (Order *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Order *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Order *fieldValue = [[Order alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Acceptorder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Acceptorder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getdriverdetail_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int64_t __driverid;

  BOOL __sessionid_isset;
  BOOL __driverid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=driverid, setter=setDriverid:) int64_t driverid;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid driverid: (int64_t) driverid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int64_t) driverid;
- (void) setDriverid: (int64_t) driverid;
#endif
- (BOOL) driveridIsSet;

@end

@implementation getdriverdetail_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid driverid: (int64_t) driverid
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __driverid = driverid;
  __driverid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"driverid"])
  {
    __driverid = [decoder decodeInt64ForKey: @"driverid"];
    __driverid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__driverid_isset)
  {
    [encoder encodeInt64: __driverid forKey: @"driverid"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int64_t) driverid {
  return __driverid;
}

- (void) setDriverid: (int64_t) driverid {
  __driverid = driverid;
  __driverid_isset = YES;
}

- (BOOL) driveridIsSet {
  return __driverid_isset;
}

- (void) unsetDriverid {
  __driverid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDriverid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getdriverdetail_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__driverid_isset) {
    [outProtocol writeFieldBeginWithName: @"driverid" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __driverid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getdriverdetail_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",driverid:"];
  [ms appendFormat: @"%qi", __driverid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getdriverdetail_result : NSObject <NSCoding> {
  Driver * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Driver * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (Driver *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Driver *) success;
- (void) setSuccess: (Driver *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getdriverdetail_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Driver *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (Driver *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Driver *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Driver *fieldValue = [[Driver alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getdriverdetail_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getdriverdetail_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setlocation_args : NSObject <NSCoding> {
  NSString * __sessionid;
  NSMutableArray * __locations;

  BOOL __sessionid_isset;
  BOOL __locations_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, retain, getter=locations, setter=setLocations:) NSMutableArray * locations;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid locations: (NSMutableArray *) locations;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) locations;
- (void) setLocations: (NSMutableArray *) locations;
#endif
- (BOOL) locationsIsSet;

@end

@implementation setlocation_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid locations: (NSMutableArray *) locations
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __locations = [locations retain_stub];
  __locations_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"locations"])
  {
    __locations = [[decoder decodeObjectForKey: @"locations"] retain_stub];
    __locations_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__locations_isset)
  {
    [encoder encodeObject: __locations forKey: @"locations"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [__locations release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (NSMutableArray *) locations {
  return [[__locations retain_stub] autorelease_stub];
}

- (void) setLocations: (NSMutableArray *) locations {
  [locations retain_stub];
  [__locations release_stub];
  __locations = locations;
  __locations_isset = YES;
}

- (BOOL) locationsIsSet {
  return __locations_isset;
}

- (void) unsetLocations {
  [__locations release_stub];
  __locations = nil;
  __locations_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            locationinfo *_elem2 = [[locationinfo alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setLocations: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setlocation_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locations_isset) {
    if (__locations != nil) {
      [outProtocol writeFieldBeginWithName: @"locations" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__locations count]];
        int i4;
        for (i4 = 0; i4 < [__locations count]; i4++)
        {
          [[__locations objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setlocation_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",locations:"];
  [ms appendFormat: @"%@", __locations];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Setlocation_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Setlocation_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Setlocation_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Setlocation_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setstate_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int32_t __state;

  BOOL __sessionid_isset;
  BOOL __state_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=state, setter=setState:) int32_t state;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid state: (int32_t) state;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int32_t) state;
- (void) setState: (int32_t) state;
#endif
- (BOOL) stateIsSet;

@end

@implementation setstate_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid state: (int32_t) state
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __state = state;
  __state_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [decoder decodeInt32ForKey: @"state"];
    __state_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__state_isset)
  {
    [encoder encodeInt32: __state forKey: @"state"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int32_t) state {
  return __state;
}

- (void) setState: (int32_t) state {
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  __state_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setstate_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__state_isset) {
    [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __state];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setstate_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",state:"];
  [ms appendFormat: @"%i", __state];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Setstate_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Setstate_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Setstate_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Setstate_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface createorderbycall_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int64_t __callmobile;

  BOOL __sessionid_isset;
  BOOL __callmobile_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=callmobile, setter=setCallmobile:) int64_t callmobile;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid callmobile: (int64_t) callmobile;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int64_t) callmobile;
- (void) setCallmobile: (int64_t) callmobile;
#endif
- (BOOL) callmobileIsSet;

@end

@implementation createorderbycall_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid callmobile: (int64_t) callmobile
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __callmobile = callmobile;
  __callmobile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"callmobile"])
  {
    __callmobile = [decoder decodeInt64ForKey: @"callmobile"];
    __callmobile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__callmobile_isset)
  {
    [encoder encodeInt64: __callmobile forKey: @"callmobile"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int64_t) callmobile {
  return __callmobile;
}

- (void) setCallmobile: (int64_t) callmobile {
  __callmobile = callmobile;
  __callmobile_isset = YES;
}

- (BOOL) callmobileIsSet {
  return __callmobile_isset;
}

- (void) unsetCallmobile {
  __callmobile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCallmobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"createorderbycall_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__callmobile_isset) {
    [outProtocol writeFieldBeginWithName: @"callmobile" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __callmobile];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"createorderbycall_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",callmobile:"];
  [ms appendFormat: @"%qi", __callmobile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Createorderbycall_result : NSObject <NSCoding> {
  Order * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Order * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (Order *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Order *) success;
- (void) setSuccess: (Order *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Createorderbycall_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Order *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (Order *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Order *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Order *fieldValue = [[Order alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Createorderbycall_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Createorderbycall_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getorderlist_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int32_t __state;

  BOOL __sessionid_isset;
  BOOL __state_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=state, setter=setState:) int32_t state;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid state: (int32_t) state;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int32_t) state;
- (void) setState: (int32_t) state;
#endif
- (BOOL) stateIsSet;

@end

@implementation getorderlist_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid state: (int32_t) state
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __state = state;
  __state_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [decoder decodeInt32ForKey: @"state"];
    __state_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__state_isset)
  {
    [encoder encodeInt32: __state forKey: @"state"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int32_t) state {
  return __state;
}

- (void) setState: (int32_t) state {
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  __state_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getorderlist_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__state_isset) {
    [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __state];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getorderlist_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",state:"];
  [ms appendFormat: @"%i", __state];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getorderlist_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getorderlist_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Order *_elem7 = [[Order alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getorderlist_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [[__success objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getorderlist_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getincome_args : NSObject <NSCoding> {
  NSString * __sessionid;

  BOOL __sessionid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

@end

@implementation getincome_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getincome_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getincome_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getincome_result : NSObject <NSCoding> {
  NSMutableDictionary * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableDictionary * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableDictionary *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) success;
- (void) setSuccess: (NSMutableDictionary *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getincome_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableDictionary *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableDictionary *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_MAP) {
          int _size10;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size10];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            int32_t _key12 = [inProtocol readI32];
            double _val13 = [inProtocol readDouble];
            [fieldValue setObject: [NSNumber numberWithDouble: _val13] forKey: [NSNumber numberWithLong: _key12]];
          }
          [inProtocol readMapEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getincome_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_DOUBLE size: [__success count]];
        NSEnumerator * _iter14 = [__success keyEnumerator];
        id key15;
        while ((key15 = [_iter14 nextObject]))
        {
          [outProtocol writeI32: [key15 longValue]];
          [outProtocol writeDouble: [[__success objectForKey: key15] doubleValue]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getincome_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getcomment_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int32_t __pageindex;
  int64_t __driverid;

  BOOL __sessionid_isset;
  BOOL __pageindex_isset;
  BOOL __driverid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=pageindex, setter=setPageindex:) int32_t pageindex;
@property (nonatomic, getter=driverid, setter=setDriverid:) int64_t driverid;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid pageindex: (int32_t) pageindex driverid: (int64_t) driverid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageindex;
- (void) setPageindex: (int32_t) pageindex;
#endif
- (BOOL) pageindexIsSet;

#if !__has_feature(objc_arc)
- (int64_t) driverid;
- (void) setDriverid: (int64_t) driverid;
#endif
- (BOOL) driveridIsSet;

@end

@implementation getcomment_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid pageindex: (int32_t) pageindex driverid: (int64_t) driverid
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __pageindex = pageindex;
  __pageindex_isset = YES;
  __driverid = driverid;
  __driverid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageindex"])
  {
    __pageindex = [decoder decodeInt32ForKey: @"pageindex"];
    __pageindex_isset = YES;
  }
  if ([decoder containsValueForKey: @"driverid"])
  {
    __driverid = [decoder decodeInt64ForKey: @"driverid"];
    __driverid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__pageindex_isset)
  {
    [encoder encodeInt32: __pageindex forKey: @"pageindex"];
  }
  if (__driverid_isset)
  {
    [encoder encodeInt64: __driverid forKey: @"driverid"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int32_t) pageindex {
  return __pageindex;
}

- (void) setPageindex: (int32_t) pageindex {
  __pageindex = pageindex;
  __pageindex_isset = YES;
}

- (BOOL) pageindexIsSet {
  return __pageindex_isset;
}

- (void) unsetPageindex {
  __pageindex_isset = NO;
}

- (int64_t) driverid {
  return __driverid;
}

- (void) setDriverid: (int64_t) driverid {
  __driverid = driverid;
  __driverid_isset = YES;
}

- (BOOL) driveridIsSet {
  return __driverid_isset;
}

- (void) unsetDriverid {
  __driverid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageindex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDriverid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getcomment_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pageindex_isset) {
    [outProtocol writeFieldBeginWithName: @"pageindex" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __pageindex];
    [outProtocol writeFieldEnd];
  }
  if (__driverid_isset) {
    [outProtocol writeFieldBeginWithName: @"driverid" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __driverid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getcomment_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",pageindex:"];
  [ms appendFormat: @"%i", __pageindex];
  [ms appendString: @",driverid:"];
  [ms appendFormat: @"%qi", __driverid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getcomment_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getcomment_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size16;
          [inProtocol readListBeginReturningElementType: NULL size: &_size16];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            Comment *_elem18 = [[Comment alloc] init];
            [_elem18 read: inProtocol];
            [fieldValue addObject: _elem18];
            [_elem18 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getcomment_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i20;
        for (i20 = 0; i20 < [__success count]; i20++)
        {
          [[__success objectAtIndex: i20] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getcomment_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getneardrivers_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int32_t __count;
  int32_t __distance;

  BOOL __sessionid_isset;
  BOOL __count_isset;
  BOOL __distance_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=count, setter=setCount:) int32_t count;
@property (nonatomic, getter=distance, setter=setDistance:) int32_t distance;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid count: (int32_t) count distance: (int32_t) distance;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int32_t) count;
- (void) setCount: (int32_t) count;
#endif
- (BOOL) countIsSet;

#if !__has_feature(objc_arc)
- (int32_t) distance;
- (void) setDistance: (int32_t) distance;
#endif
- (BOOL) distanceIsSet;

@end

@implementation getneardrivers_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid count: (int32_t) count distance: (int32_t) distance
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __count = count;
  __count_isset = YES;
  __distance = distance;
  __distance_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"distance"])
  {
    __distance = [decoder decodeInt32ForKey: @"distance"];
    __distance_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
  if (__distance_isset)
  {
    [encoder encodeInt32: __distance forKey: @"distance"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (int32_t) distance {
  return __distance;
}

- (void) setDistance: (int32_t) distance {
  __distance = distance;
  __distance_isset = YES;
}

- (BOOL) distanceIsSet {
  return __distance_isset;
}

- (void) unsetDistance {
  __distance_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDistance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getneardrivers_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  if (__distance_isset) {
    [outProtocol writeFieldBeginWithName: @"distance" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __distance];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getneardrivers_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @",distance:"];
  [ms appendFormat: @"%i", __distance];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getneardrivers_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getneardrivers_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size21;
          [inProtocol readListBeginReturningElementType: NULL size: &_size21];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size21];
          int _i22;
          for (_i22 = 0; _i22 < _size21; ++_i22)
          {
            Driver *_elem23 = [[Driver alloc] init];
            [_elem23 read: inProtocol];
            [fieldValue addObject: _elem23];
            [_elem23 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getneardrivers_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i25;
        for (i25 = 0; i25 < [__success count]; i25++)
        {
          [[__success objectAtIndex: i25] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getneardrivers_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface uporder_args : NSObject <NSCoding> {
  NSString * __sessionid;
  reportorder * __order;

  BOOL __sessionid_isset;
  BOOL __order_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, retain, getter=order, setter=setOrder:) reportorder * order;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid order: (reportorder *) order;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (reportorder *) order;
- (void) setOrder: (reportorder *) order;
#endif
- (BOOL) orderIsSet;

@end

@implementation uporder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid order: (reportorder *) order
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __order = [order retain_stub];
  __order_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"order"])
  {
    __order = [[decoder decodeObjectForKey: @"order"] retain_stub];
    __order_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__order_isset)
  {
    [encoder encodeObject: __order forKey: @"order"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [__order release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (reportorder *) order {
  return [[__order retain_stub] autorelease_stub];
}

- (void) setOrder: (reportorder *) order {
  [order retain_stub];
  [__order release_stub];
  __order = order;
  __order_isset = YES;
}

- (BOOL) orderIsSet {
  return __order_isset;
}

- (void) unsetOrder {
  [__order release_stub];
  __order = nil;
  __order_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          reportorder *fieldValue = [[reportorder alloc] init];
          [fieldValue read: inProtocol];
          [self setOrder: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"uporder_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__order_isset) {
    if (__order != nil) {
      [outProtocol writeFieldBeginWithName: @"order" type: TType_STRUCT fieldID: 2];
      [__order write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"uporder_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",order:"];
  [ms appendFormat: @"%@", __order];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Uporder_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Uporder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Uporder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Uporder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface cancleorder_args : NSObject <NSCoding> {
  NSString * __sessionid;
  reportorder * __order;

  BOOL __sessionid_isset;
  BOOL __order_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, retain, getter=order, setter=setOrder:) reportorder * order;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid order: (reportorder *) order;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (reportorder *) order;
- (void) setOrder: (reportorder *) order;
#endif
- (BOOL) orderIsSet;

@end

@implementation cancleorder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid order: (reportorder *) order
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __order = [order retain_stub];
  __order_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"order"])
  {
    __order = [[decoder decodeObjectForKey: @"order"] retain_stub];
    __order_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__order_isset)
  {
    [encoder encodeObject: __order forKey: @"order"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [__order release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (reportorder *) order {
  return [[__order retain_stub] autorelease_stub];
}

- (void) setOrder: (reportorder *) order {
  [order retain_stub];
  [__order release_stub];
  __order = order;
  __order_isset = YES;
}

- (BOOL) orderIsSet {
  return __order_isset;
}

- (void) unsetOrder {
  [__order release_stub];
  __order = nil;
  __order_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          reportorder *fieldValue = [[reportorder alloc] init];
          [fieldValue read: inProtocol];
          [self setOrder: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"cancleorder_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__order_isset) {
    if (__order != nil) {
      [outProtocol writeFieldBeginWithName: @"order" type: TType_STRUCT fieldID: 2];
      [__order write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"cancleorder_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",order:"];
  [ms appendFormat: @"%@", __order];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Cancleorder_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Cancleorder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Cancleorder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Cancleorder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface makeuporder_args : NSObject <NSCoding> {
  NSString * __sessionid;
  reportorder * __order;

  BOOL __sessionid_isset;
  BOOL __order_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, retain, getter=order, setter=setOrder:) reportorder * order;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid order: (reportorder *) order;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (reportorder *) order;
- (void) setOrder: (reportorder *) order;
#endif
- (BOOL) orderIsSet;

@end

@implementation makeuporder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid order: (reportorder *) order
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __order = [order retain_stub];
  __order_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"order"])
  {
    __order = [[decoder decodeObjectForKey: @"order"] retain_stub];
    __order_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__order_isset)
  {
    [encoder encodeObject: __order forKey: @"order"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [__order release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (reportorder *) order {
  return [[__order retain_stub] autorelease_stub];
}

- (void) setOrder: (reportorder *) order {
  [order retain_stub];
  [__order release_stub];
  __order = order;
  __order_isset = YES;
}

- (BOOL) orderIsSet {
  return __order_isset;
}

- (void) unsetOrder {
  [__order release_stub];
  __order = nil;
  __order_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          reportorder *fieldValue = [[reportorder alloc] init];
          [fieldValue read: inProtocol];
          [self setOrder: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"makeuporder_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__order_isset) {
    if (__order != nil) {
      [outProtocol writeFieldBeginWithName: @"order" type: TType_STRUCT fieldID: 2];
      [__order write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"makeuporder_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",order:"];
  [ms appendFormat: @"%@", __order];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Makeuporder_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Makeuporder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Makeuporder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Makeuporder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getnotification_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int32_t __pageindex;

  BOOL __sessionid_isset;
  BOOL __pageindex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=pageindex, setter=setPageindex:) int32_t pageindex;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid pageindex: (int32_t) pageindex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageindex;
- (void) setPageindex: (int32_t) pageindex;
#endif
- (BOOL) pageindexIsSet;

@end

@implementation getnotification_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid pageindex: (int32_t) pageindex
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __pageindex = pageindex;
  __pageindex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageindex"])
  {
    __pageindex = [decoder decodeInt32ForKey: @"pageindex"];
    __pageindex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__pageindex_isset)
  {
    [encoder encodeInt32: __pageindex forKey: @"pageindex"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int32_t) pageindex {
  return __pageindex;
}

- (void) setPageindex: (int32_t) pageindex {
  __pageindex = pageindex;
  __pageindex_isset = YES;
}

- (BOOL) pageindexIsSet {
  return __pageindex_isset;
}

- (void) unsetPageindex {
  __pageindex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageindex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getnotification_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pageindex_isset) {
    [outProtocol writeFieldBeginWithName: @"pageindex" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __pageindex];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getnotification_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",pageindex:"];
  [ms appendFormat: @"%i", __pageindex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getnotification_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getnotification_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size26;
          [inProtocol readListBeginReturningElementType: NULL size: &_size26];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size26];
          int _i27;
          for (_i27 = 0; _i27 < _size26; ++_i27)
          {
            Notification *_elem28 = [[Notification alloc] init];
            [_elem28 read: inProtocol];
            [fieldValue addObject: _elem28];
            [_elem28 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getnotification_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i30;
        for (i30 = 0; i30 < [__success count]; i30++)
        {
          [[__success objectAtIndex: i30] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getnotification_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface startorder_args : NSObject <NSCoding> {
  NSString * __sessionid;
  locationinfo * __location;
  int32_t __orderstate;

  BOOL __sessionid_isset;
  BOOL __location_isset;
  BOOL __orderstate_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, retain, getter=location, setter=setLocation:) locationinfo * location;
@property (nonatomic, getter=orderstate, setter=setOrderstate:) int32_t orderstate;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid location: (locationinfo *) location orderstate: (int32_t) orderstate;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (locationinfo *) location;
- (void) setLocation: (locationinfo *) location;
#endif
- (BOOL) locationIsSet;

#if !__has_feature(objc_arc)
- (int32_t) orderstate;
- (void) setOrderstate: (int32_t) orderstate;
#endif
- (BOOL) orderstateIsSet;

@end

@implementation startorder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid location: (locationinfo *) location orderstate: (int32_t) orderstate
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  __orderstate = orderstate;
  __orderstate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderstate"])
  {
    __orderstate = [decoder decodeInt32ForKey: @"orderstate"];
    __orderstate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__orderstate_isset)
  {
    [encoder encodeInt32: __orderstate forKey: @"orderstate"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [__location release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (locationinfo *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (locationinfo *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (int32_t) orderstate {
  return __orderstate;
}

- (void) setOrderstate: (int32_t) orderstate {
  __orderstate = orderstate;
  __orderstate_isset = YES;
}

- (BOOL) orderstateIsSet {
  return __orderstate_isset;
}

- (void) unsetOrderstate {
  __orderstate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          locationinfo *fieldValue = [[locationinfo alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOrderstate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"startorder_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 2];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderstate_isset) {
    [outProtocol writeFieldBeginWithName: @"orderstate" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __orderstate];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"startorder_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @",orderstate:"];
  [ms appendFormat: @"%i", __orderstate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Startorder_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Startorder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Startorder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Startorder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getdriversoforder_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int32_t __orderid;

  BOOL __sessionid_isset;
  BOOL __orderid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=orderid, setter=setOrderid:) int32_t orderid;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid orderid: (int32_t) orderid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int32_t) orderid;
- (void) setOrderid: (int32_t) orderid;
#endif
- (BOOL) orderidIsSet;

@end

@implementation getdriversoforder_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid orderid: (int32_t) orderid
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __orderid = orderid;
  __orderid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"orderid"])
  {
    __orderid = [decoder decodeInt32ForKey: @"orderid"];
    __orderid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__orderid_isset)
  {
    [encoder encodeInt32: __orderid forKey: @"orderid"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int32_t) orderid {
  return __orderid;
}

- (void) setOrderid: (int32_t) orderid {
  __orderid = orderid;
  __orderid_isset = YES;
}

- (BOOL) orderidIsSet {
  return __orderid_isset;
}

- (void) unsetOrderid {
  __orderid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOrderid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getdriversoforder_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__orderid_isset) {
    [outProtocol writeFieldBeginWithName: @"orderid" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __orderid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getdriversoforder_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",orderid:"];
  [ms appendFormat: @"%i", __orderid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getdriversoforder_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getdriversoforder_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size31;
          [inProtocol readListBeginReturningElementType: NULL size: &_size31];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size31];
          int _i32;
          for (_i32 = 0; _i32 < _size31; ++_i32)
          {
            Driver *_elem33 = [[Driver alloc] init];
            [_elem33 read: inProtocol];
            [fieldValue addObject: _elem33];
            [_elem33 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getdriversoforder_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i35;
        for (i35 = 0; i35 < [__success count]; i35++)
        {
          [[__success objectAtIndex: i35] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getdriversoforder_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface finddrivers_args : NSObject <NSCoding> {
  double __longitude;
  double __latitude;
  int32_t __count;
  int32_t __distance;

  BOOL __longitude_isset;
  BOOL __latitude_isset;
  BOOL __count_isset;
  BOOL __distance_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=longitude, setter=setLongitude:) double longitude;
@property (nonatomic, getter=latitude, setter=setLatitude:) double latitude;
@property (nonatomic, getter=count, setter=setCount:) int32_t count;
@property (nonatomic, getter=distance, setter=setDistance:) int32_t distance;
#endif

- (id) init;
- (id) initWithLongitude: (double) longitude latitude: (double) latitude count: (int32_t) count distance: (int32_t) distance;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (double) longitude;
- (void) setLongitude: (double) longitude;
#endif
- (BOOL) longitudeIsSet;

#if !__has_feature(objc_arc)
- (double) latitude;
- (void) setLatitude: (double) latitude;
#endif
- (BOOL) latitudeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) count;
- (void) setCount: (int32_t) count;
#endif
- (BOOL) countIsSet;

#if !__has_feature(objc_arc)
- (int32_t) distance;
- (void) setDistance: (int32_t) distance;
#endif
- (BOOL) distanceIsSet;

@end

@implementation finddrivers_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithLongitude: (double) longitude latitude: (double) latitude count: (int32_t) count distance: (int32_t) distance
{
  self = [super init];
  __longitude = longitude;
  __longitude_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __count = count;
  __count_isset = YES;
  __distance = distance;
  __distance_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"distance"])
  {
    __distance = [decoder decodeInt32ForKey: @"distance"];
    __distance_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
  if (__distance_isset)
  {
    [encoder encodeInt32: __distance forKey: @"distance"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (int32_t) distance {
  return __distance;
}

- (void) setDistance: (int32_t) distance {
  __distance = distance;
  __distance_isset = YES;
}

- (BOOL) distanceIsSet {
  return __distance_isset;
}

- (void) unsetDistance {
  __distance_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDistance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"finddrivers_args"];
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  if (__distance_isset) {
    [outProtocol writeFieldBeginWithName: @"distance" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __distance];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"finddrivers_args("];
  [ms appendString: @"longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @",distance:"];
  [ms appendFormat: @"%i", __distance];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Finddrivers_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Finddrivers_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size36;
          [inProtocol readListBeginReturningElementType: NULL size: &_size36];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size36];
          int _i37;
          for (_i37 = 0; _i37 < _size36; ++_i37)
          {
            Driver *_elem38 = [[Driver alloc] init];
            [_elem38 read: inProtocol];
            [fieldValue addObject: _elem38];
            [_elem38 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Finddrivers_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i40;
        for (i40 = 0; i40 < [__success count]; i40++)
        {
          [[__success objectAtIndex: i40] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Finddrivers_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getvalidatecode_args : NSObject <NSCoding> {
  int64_t __mobile;

  BOOL __mobile_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=mobile, setter=setMobile:) int64_t mobile;
#endif

- (id) init;
- (id) initWithMobile: (int64_t) mobile;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int64_t) mobile;
- (void) setMobile: (int64_t) mobile;
#endif
- (BOOL) mobileIsSet;

@end

@implementation getvalidatecode_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMobile: (int64_t) mobile
{
  self = [super init];
  __mobile = mobile;
  __mobile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [decoder decodeInt64ForKey: @"mobile"];
    __mobile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mobile_isset)
  {
    [encoder encodeInt64: __mobile forKey: @"mobile"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) mobile {
  return __mobile;
}

- (void) setMobile: (int64_t) mobile {
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  __mobile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getvalidatecode_args"];
  if (__mobile_isset) {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __mobile];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getvalidatecode_args("];
  [ms appendString: @"mobile:"];
  [ms appendFormat: @"%qi", __mobile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getvalidatecode_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getvalidatecode_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getvalidatecode_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getvalidatecode_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface loginforcustomer_args : NSObject <NSCoding> {
  int64_t __mobile;
  NSString * __validatecode;

  BOOL __mobile_isset;
  BOOL __validatecode_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=mobile, setter=setMobile:) int64_t mobile;
@property (nonatomic, retain, getter=validatecode, setter=setValidatecode:) NSString * validatecode;
#endif

- (id) init;
- (id) initWithMobile: (int64_t) mobile validatecode: (NSString *) validatecode;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int64_t) mobile;
- (void) setMobile: (int64_t) mobile;
#endif
- (BOOL) mobileIsSet;

#if !__has_feature(objc_arc)
- (NSString *) validatecode;
- (void) setValidatecode: (NSString *) validatecode;
#endif
- (BOOL) validatecodeIsSet;

@end

@implementation loginforcustomer_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMobile: (int64_t) mobile validatecode: (NSString *) validatecode
{
  self = [super init];
  __mobile = mobile;
  __mobile_isset = YES;
  __validatecode = [validatecode retain_stub];
  __validatecode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [decoder decodeInt64ForKey: @"mobile"];
    __mobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"validatecode"])
  {
    __validatecode = [[decoder decodeObjectForKey: @"validatecode"] retain_stub];
    __validatecode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mobile_isset)
  {
    [encoder encodeInt64: __mobile forKey: @"mobile"];
  }
  if (__validatecode_isset)
  {
    [encoder encodeObject: __validatecode forKey: @"validatecode"];
  }
}

- (void) dealloc
{
  [__validatecode release_stub];
  [super dealloc_stub];
}

- (int64_t) mobile {
  return __mobile;
}

- (void) setMobile: (int64_t) mobile {
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  __mobile_isset = NO;
}

- (NSString *) validatecode {
  return [[__validatecode retain_stub] autorelease_stub];
}

- (void) setValidatecode: (NSString *) validatecode {
  [validatecode retain_stub];
  [__validatecode release_stub];
  __validatecode = validatecode;
  __validatecode_isset = YES;
}

- (BOOL) validatecodeIsSet {
  return __validatecode_isset;
}

- (void) unsetValidatecode {
  [__validatecode release_stub];
  __validatecode = nil;
  __validatecode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValidatecode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"loginforcustomer_args"];
  if (__mobile_isset) {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __mobile];
    [outProtocol writeFieldEnd];
  }
  if (__validatecode_isset) {
    if (__validatecode != nil) {
      [outProtocol writeFieldBeginWithName: @"validatecode" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __validatecode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"loginforcustomer_args("];
  [ms appendString: @"mobile:"];
  [ms appendFormat: @"%qi", __mobile];
  [ms appendString: @",validatecode:"];
  [ms appendFormat: @"\"%@\"", __validatecode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Loginforcustomer_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Loginforcustomer_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Loginforcustomer_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Loginforcustomer_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface orderdrivers_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int64_t __mobile;
  locationinfo * __location;
  int32_t __reachtime;
  int32_t __count;

  BOOL __sessionid_isset;
  BOOL __mobile_isset;
  BOOL __location_isset;
  BOOL __reachtime_isset;
  BOOL __count_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=mobile, setter=setMobile:) int64_t mobile;
@property (nonatomic, retain, getter=location, setter=setLocation:) locationinfo * location;
@property (nonatomic, getter=reachtime, setter=setReachtime:) int32_t reachtime;
@property (nonatomic, getter=count, setter=setCount:) int32_t count;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid mobile: (int64_t) mobile location: (locationinfo *) location reachtime: (int32_t) reachtime count: (int32_t) count;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int64_t) mobile;
- (void) setMobile: (int64_t) mobile;
#endif
- (BOOL) mobileIsSet;

#if !__has_feature(objc_arc)
- (locationinfo *) location;
- (void) setLocation: (locationinfo *) location;
#endif
- (BOOL) locationIsSet;

#if !__has_feature(objc_arc)
- (int32_t) reachtime;
- (void) setReachtime: (int32_t) reachtime;
#endif
- (BOOL) reachtimeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) count;
- (void) setCount: (int32_t) count;
#endif
- (BOOL) countIsSet;

@end

@implementation orderdrivers_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid mobile: (int64_t) mobile location: (locationinfo *) location reachtime: (int32_t) reachtime count: (int32_t) count
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __mobile = mobile;
  __mobile_isset = YES;
  __location = [location retain_stub];
  __location_isset = YES;
  __reachtime = reachtime;
  __reachtime_isset = YES;
  __count = count;
  __count_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [decoder decodeInt64ForKey: @"mobile"];
    __mobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"location"])
  {
    __location = [[decoder decodeObjectForKey: @"location"] retain_stub];
    __location_isset = YES;
  }
  if ([decoder containsValueForKey: @"reachtime"])
  {
    __reachtime = [decoder decodeInt32ForKey: @"reachtime"];
    __reachtime_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__mobile_isset)
  {
    [encoder encodeInt64: __mobile forKey: @"mobile"];
  }
  if (__location_isset)
  {
    [encoder encodeObject: __location forKey: @"location"];
  }
  if (__reachtime_isset)
  {
    [encoder encodeInt32: __reachtime forKey: @"reachtime"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [__location release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int64_t) mobile {
  return __mobile;
}

- (void) setMobile: (int64_t) mobile {
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  __mobile_isset = NO;
}

- (locationinfo *) location {
  return [[__location retain_stub] autorelease_stub];
}

- (void) setLocation: (locationinfo *) location {
  [location retain_stub];
  [__location release_stub];
  __location = location;
  __location_isset = YES;
}

- (BOOL) locationIsSet {
  return __location_isset;
}

- (void) unsetLocation {
  [__location release_stub];
  __location = nil;
  __location_isset = NO;
}

- (int32_t) reachtime {
  return __reachtime;
}

- (void) setReachtime: (int32_t) reachtime {
  __reachtime = reachtime;
  __reachtime_isset = YES;
}

- (BOOL) reachtimeIsSet {
  return __reachtime_isset;
}

- (void) unsetReachtime {
  __reachtime_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          locationinfo *fieldValue = [[locationinfo alloc] init];
          [fieldValue read: inProtocol];
          [self setLocation: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReachtime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"orderdrivers_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobile_isset) {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __mobile];
    [outProtocol writeFieldEnd];
  }
  if (__location_isset) {
    if (__location != nil) {
      [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 3];
      [__location write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reachtime_isset) {
    [outProtocol writeFieldBeginWithName: @"reachtime" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __reachtime];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"orderdrivers_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"%qi", __mobile];
  [ms appendString: @",location:"];
  [ms appendFormat: @"%@", __location];
  [ms appendString: @",reachtime:"];
  [ms appendFormat: @"%i", __reachtime];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Orderdrivers_result : NSObject <NSCoding> {
  Order * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Order * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (Order *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Order *) success;
- (void) setSuccess: (Order *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Orderdrivers_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Order *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (Order *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Order *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Order *fieldValue = [[Order alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Orderdrivers_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Orderdrivers_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getdrviercomment_args : NSObject <NSCoding> {
  int32_t __driverid;
  int32_t __pageindex;

  BOOL __driverid_isset;
  BOOL __pageindex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=driverid, setter=setDriverid:) int32_t driverid;
@property (nonatomic, getter=pageindex, setter=setPageindex:) int32_t pageindex;
#endif

- (id) init;
- (id) initWithDriverid: (int32_t) driverid pageindex: (int32_t) pageindex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) driverid;
- (void) setDriverid: (int32_t) driverid;
#endif
- (BOOL) driveridIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageindex;
- (void) setPageindex: (int32_t) pageindex;
#endif
- (BOOL) pageindexIsSet;

@end

@implementation getdrviercomment_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDriverid: (int32_t) driverid pageindex: (int32_t) pageindex
{
  self = [super init];
  __driverid = driverid;
  __driverid_isset = YES;
  __pageindex = pageindex;
  __pageindex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"driverid"])
  {
    __driverid = [decoder decodeInt32ForKey: @"driverid"];
    __driverid_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageindex"])
  {
    __pageindex = [decoder decodeInt32ForKey: @"pageindex"];
    __pageindex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__driverid_isset)
  {
    [encoder encodeInt32: __driverid forKey: @"driverid"];
  }
  if (__pageindex_isset)
  {
    [encoder encodeInt32: __pageindex forKey: @"pageindex"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) driverid {
  return __driverid;
}

- (void) setDriverid: (int32_t) driverid {
  __driverid = driverid;
  __driverid_isset = YES;
}

- (BOOL) driveridIsSet {
  return __driverid_isset;
}

- (void) unsetDriverid {
  __driverid_isset = NO;
}

- (int32_t) pageindex {
  return __pageindex;
}

- (void) setPageindex: (int32_t) pageindex {
  __pageindex = pageindex;
  __pageindex_isset = YES;
}

- (BOOL) pageindexIsSet {
  return __pageindex_isset;
}

- (void) unsetPageindex {
  __pageindex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDriverid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageindex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getdrviercomment_args"];
  if (__driverid_isset) {
    [outProtocol writeFieldBeginWithName: @"driverid" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __driverid];
    [outProtocol writeFieldEnd];
  }
  if (__pageindex_isset) {
    [outProtocol writeFieldBeginWithName: @"pageindex" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __pageindex];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getdrviercomment_args("];
  [ms appendString: @"driverid:"];
  [ms appendFormat: @"%i", __driverid];
  [ms appendString: @",pageindex:"];
  [ms appendFormat: @"%i", __pageindex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getdrviercomment_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getdrviercomment_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size41;
          [inProtocol readListBeginReturningElementType: NULL size: &_size41];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size41];
          int _i42;
          for (_i42 = 0; _i42 < _size41; ++_i42)
          {
            Comment *_elem43 = [[Comment alloc] init];
            [_elem43 read: inProtocol];
            [fieldValue addObject: _elem43];
            [_elem43 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getdrviercomment_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i45;
        for (i45 = 0; i45 < [__success count]; i45++)
        {
          [[__success objectAtIndex: i45] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getdrviercomment_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface recharge_args : NSObject <NSCoding> {
  int64_t __code;
  int64_t __mobile;

  BOOL __code_isset;
  BOOL __mobile_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=code, setter=setCode:) int64_t code;
@property (nonatomic, getter=mobile, setter=setMobile:) int64_t mobile;
#endif

- (id) init;
- (id) initWithCode: (int64_t) code mobile: (int64_t) mobile;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int64_t) code;
- (void) setCode: (int64_t) code;
#endif
- (BOOL) codeIsSet;

#if !__has_feature(objc_arc)
- (int64_t) mobile;
- (void) setMobile: (int64_t) mobile;
#endif
- (BOOL) mobileIsSet;

@end

@implementation recharge_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCode: (int64_t) code mobile: (int64_t) mobile
{
  self = [super init];
  __code = code;
  __code_isset = YES;
  __mobile = mobile;
  __mobile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [decoder decodeInt64ForKey: @"code"];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [decoder decodeInt64ForKey: @"mobile"];
    __mobile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__code_isset)
  {
    [encoder encodeInt64: __code forKey: @"code"];
  }
  if (__mobile_isset)
  {
    [encoder encodeInt64: __mobile forKey: @"mobile"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) code {
  return __code;
}

- (void) setCode: (int64_t) code {
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  __code_isset = NO;
}

- (int64_t) mobile {
  return __mobile;
}

- (void) setMobile: (int64_t) mobile {
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  __mobile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"recharge_args"];
  if (__code_isset) {
    [outProtocol writeFieldBeginWithName: @"code" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __code];
    [outProtocol writeFieldEnd];
  }
  if (__mobile_isset) {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __mobile];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"recharge_args("];
  [ms appendString: @"code:"];
  [ms appendFormat: @"%qi", __code];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"%qi", __mobile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Recharge_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Recharge_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Recharge_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Recharge_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getcitylist_args : NSObject <NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation getcitylist_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getcitylist_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getcitylist_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getcitylist_result : NSObject <NSCoding> {
  NSMutableDictionary * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableDictionary * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableDictionary *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) success;
- (void) setSuccess: (NSMutableDictionary *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getcitylist_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableDictionary *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableDictionary *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_MAP) {
          int _size46;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size46];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size46];
          int _i47;
          for (_i47 = 0; _i47 < _size46; ++_i47)
          {
            int32_t _key48 = [inProtocol readI32];
            NSString * _val49 = [inProtocol readString];
            [fieldValue setObject: _val49 forKey: [NSNumber numberWithLong: _key48]];
          }
          [inProtocol readMapEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getcitylist_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRING size: [__success count]];
        NSEnumerator * _iter50 = [__success keyEnumerator];
        id key51;
        while ((key51 = [_iter50 nextObject]))
        {
          [outProtocol writeI32: [key51 longValue]];
          [outProtocol writeString: [__success objectForKey: key51]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getcitylist_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getpricelist_args : NSObject <NSCoding> {
  int32_t __city;

  BOOL __city_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=city, setter=setCity:) int32_t city;
#endif

- (id) init;
- (id) initWithCity: (int32_t) city;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) city;
- (void) setCity: (int32_t) city;
#endif
- (BOOL) cityIsSet;

@end

@implementation getpricelist_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCity: (int32_t) city
{
  self = [super init];
  __city = city;
  __city_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"city"])
  {
    __city = [decoder decodeInt32ForKey: @"city"];
    __city_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__city_isset)
  {
    [encoder encodeInt32: __city forKey: @"city"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) city {
  return __city;
}

- (void) setCity: (int32_t) city {
  __city = city;
  __city_isset = YES;
}

- (BOOL) cityIsSet {
  return __city_isset;
}

- (void) unsetCity {
  __city_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getpricelist_args"];
  if (__city_isset) {
    [outProtocol writeFieldBeginWithName: @"city" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __city];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getpricelist_args("];
  [ms appendString: @"city:"];
  [ms appendFormat: @"%i", __city];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getpricelist_result : NSObject <NSCoding> {
  NSMutableDictionary * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableDictionary * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableDictionary *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) success;
- (void) setSuccess: (NSMutableDictionary *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getpricelist_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableDictionary *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableDictionary *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableDictionary *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_MAP) {
          int _size52;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size52];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size52];
          int _i53;
          for (_i53 = 0; _i53 < _size52; ++_i53)
          {
            int32_t _key54 = [inProtocol readI32];
            NSString * _val55 = [inProtocol readString];
            [fieldValue setObject: _val55 forKey: [NSNumber numberWithLong: _key54]];
          }
          [inProtocol readMapEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getpricelist_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
      {
        [outProtocol writeMapBeginWithKeyType: TType_I32 valueType: TType_STRING size: [__success count]];
        NSEnumerator * _iter56 = [__success keyEnumerator];
        id key57;
        while ((key57 = [_iter56 nextObject]))
        {
          [outProtocol writeI32: [key57 longValue]];
          [outProtocol writeString: [__success objectForKey: key57]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getpricelist_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getcustomerorders_args : NSObject <NSCoding> {
  NSString * __sessionid;
  int32_t __pageindex;

  BOOL __sessionid_isset;
  BOOL __pageindex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, getter=pageindex, setter=setPageindex:) int32_t pageindex;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid pageindex: (int32_t) pageindex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageindex;
- (void) setPageindex: (int32_t) pageindex;
#endif
- (BOOL) pageindexIsSet;

@end

@implementation getcustomerorders_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid pageindex: (int32_t) pageindex
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __pageindex = pageindex;
  __pageindex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageindex"])
  {
    __pageindex = [decoder decodeInt32ForKey: @"pageindex"];
    __pageindex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__pageindex_isset)
  {
    [encoder encodeInt32: __pageindex forKey: @"pageindex"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (int32_t) pageindex {
  return __pageindex;
}

- (void) setPageindex: (int32_t) pageindex {
  __pageindex = pageindex;
  __pageindex_isset = YES;
}

- (BOOL) pageindexIsSet {
  return __pageindex_isset;
}

- (void) unsetPageindex {
  __pageindex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageindex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getcustomerorders_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pageindex_isset) {
    [outProtocol writeFieldBeginWithName: @"pageindex" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __pageindex];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getcustomerorders_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",pageindex:"];
  [ms appendFormat: @"%i", __pageindex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Getcustomerorders_result : NSObject <NSCoding> {
  NSMutableArray * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Getcustomerorders_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size58;
          [inProtocol readListBeginReturningElementType: NULL size: &_size58];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size58];
          int _i59;
          for (_i59 = 0; _i59 < _size58; ++_i59)
          {
            Order *_elem60 = [[Order alloc] init];
            [_elem60 read: inProtocol];
            [fieldValue addObject: _elem60];
            [_elem60 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Getcustomerorders_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i62;
        for (i62 = 0; i62 < [__success count]; i62++)
        {
          [[__success objectAtIndex: i62] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Getcustomerorders_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface sendsuggestion_args : NSObject <NSCoding> {
  int32_t __type;
  NSString * __message;

  BOOL __type_isset;
  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=type, setter=setType:) int32_t type;
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithType: (int32_t) type message: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) type;
- (void) setType: (int32_t) type;
#endif
- (BOOL) typeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@implementation sendsuggestion_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithType: (int32_t) type message: (NSString *) message
{
  self = [super init];
  __type = type;
  __type_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeInt32ForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__type_isset)
  {
    [encoder encodeInt32: __type forKey: @"type"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int32_t) type {
  return __type;
}

- (void) setType: (int32_t) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendsuggestion_args"];
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"sendsuggestion_args("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Sendsuggestion_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Sendsuggestion_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Sendsuggestion_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Sendsuggestion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface checkversion_args : NSObject <NSCoding> {
  int32_t __clienttype;
  double __currversion;

  BOOL __clienttype_isset;
  BOOL __currversion_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=clienttype, setter=setClienttype:) int32_t clienttype;
@property (nonatomic, getter=currversion, setter=setCurrversion:) double currversion;
#endif

- (id) init;
- (id) initWithClienttype: (int32_t) clienttype currversion: (double) currversion;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (int32_t) clienttype;
- (void) setClienttype: (int32_t) clienttype;
#endif
- (BOOL) clienttypeIsSet;

#if !__has_feature(objc_arc)
- (double) currversion;
- (void) setCurrversion: (double) currversion;
#endif
- (BOOL) currversionIsSet;

@end

@implementation checkversion_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClienttype: (int32_t) clienttype currversion: (double) currversion
{
  self = [super init];
  __clienttype = clienttype;
  __clienttype_isset = YES;
  __currversion = currversion;
  __currversion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clienttype"])
  {
    __clienttype = [decoder decodeInt32ForKey: @"clienttype"];
    __clienttype_isset = YES;
  }
  if ([decoder containsValueForKey: @"currversion"])
  {
    __currversion = [decoder decodeDoubleForKey: @"currversion"];
    __currversion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clienttype_isset)
  {
    [encoder encodeInt32: __clienttype forKey: @"clienttype"];
  }
  if (__currversion_isset)
  {
    [encoder encodeDouble: __currversion forKey: @"currversion"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) clienttype {
  return __clienttype;
}

- (void) setClienttype: (int32_t) clienttype {
  __clienttype = clienttype;
  __clienttype_isset = YES;
}

- (BOOL) clienttypeIsSet {
  return __clienttype_isset;
}

- (void) unsetClienttype {
  __clienttype_isset = NO;
}

- (double) currversion {
  return __currversion;
}

- (void) setCurrversion: (double) currversion {
  __currversion = currversion;
  __currversion_isset = YES;
}

- (BOOL) currversionIsSet {
  return __currversion_isset;
}

- (void) unsetCurrversion {
  __currversion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setClienttype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setCurrversion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"checkversion_args"];
  if (__clienttype_isset) {
    [outProtocol writeFieldBeginWithName: @"clienttype" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __clienttype];
    [outProtocol writeFieldEnd];
  }
  if (__currversion_isset) {
    [outProtocol writeFieldBeginWithName: @"currversion" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __currversion];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"checkversion_args("];
  [ms appendString: @"clienttype:"];
  [ms appendFormat: @"%i", __clienttype];
  [ms appendString: @",currversion:"];
  [ms appendFormat: @"%f", __currversion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Checkversion_result : NSObject <NSCoding> {
  Appversion * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Appversion * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (Appversion *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Appversion *) success;
- (void) setSuccess: (Appversion *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Checkversion_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Appversion *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (Appversion *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Appversion *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Appversion *fieldValue = [[Appversion alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Checkversion_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Checkversion_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface sendsms_args : NSObject <NSCoding> {
  NSMutableSet * __mobile;
  NSString * __message;

  BOOL __mobile_isset;
  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=mobile, setter=setMobile:) NSMutableSet * mobile;
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithMobile: (NSMutableSet *) mobile message: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableSet *) mobile;
- (void) setMobile: (NSMutableSet *) mobile;
#endif
- (BOOL) mobileIsSet;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@implementation sendsms_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMobile: (NSMutableSet *) mobile message: (NSString *) message
{
  self = [super init];
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__mobile release_stub];
  [__message release_stub];
  [super dealloc_stub];
}

- (NSMutableSet *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSMutableSet *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_SET) {
          int _size63;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size63];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size63];
          int _i64;
          for (_i64 = 0; _i64 < _size63; ++_i64)
          {
            int64_t _elem65 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem65]];
          }
          [inProtocol readSetEnd];
          [self setMobile: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"sendsms_args"];
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_SET fieldID: 1];
      {
        [outProtocol writeSetBeginWithElementType: TType_I64 size: [__mobile count]];
        NSEnumerator * _iter66 = [__mobile objectEnumerator];
        id obj67;
        while ((obj67 = [_iter66 nextObject]))
        {
          [outProtocol writeI64: [obj67 longLongValue]];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"sendsms_args("];
  [ms appendString: @"mobile:"];
  [ms appendFormat: @"%@", __mobile];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Sendsms_result : NSObject <NSCoding> {
  NSString * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Sendsms_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Sendsms_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Sendsms_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface decryptpicture_args : NSObject <NSCoding> {
  NSString * __sessionid;
  NSData * __opicture;
  int32_t __apitype;

  BOOL __sessionid_isset;
  BOOL __opicture_isset;
  BOOL __apitype_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sessionid, setter=setSessionid:) NSString * sessionid;
@property (nonatomic, retain, getter=opicture, setter=setOpicture:) NSData * opicture;
@property (nonatomic, getter=apitype, setter=setApitype:) int32_t apitype;
#endif

- (id) init;
- (id) initWithSessionid: (NSString *) sessionid opicture: (NSData *) opicture apitype: (int32_t) apitype;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) sessionid;
- (void) setSessionid: (NSString *) sessionid;
#endif
- (BOOL) sessionidIsSet;

#if !__has_feature(objc_arc)
- (NSData *) opicture;
- (void) setOpicture: (NSData *) opicture;
#endif
- (BOOL) opictureIsSet;

#if !__has_feature(objc_arc)
- (int32_t) apitype;
- (void) setApitype: (int32_t) apitype;
#endif
- (BOOL) apitypeIsSet;

@end

@implementation decryptpicture_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSessionid: (NSString *) sessionid opicture: (NSData *) opicture apitype: (int32_t) apitype
{
  self = [super init];
  __sessionid = [sessionid retain_stub];
  __sessionid_isset = YES;
  __opicture = [opicture retain_stub];
  __opicture_isset = YES;
  __apitype = apitype;
  __apitype_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sessionid"])
  {
    __sessionid = [[decoder decodeObjectForKey: @"sessionid"] retain_stub];
    __sessionid_isset = YES;
  }
  if ([decoder containsValueForKey: @"opicture"])
  {
    __opicture = [[decoder decodeObjectForKey: @"opicture"] retain_stub];
    __opicture_isset = YES;
  }
  if ([decoder containsValueForKey: @"apitype"])
  {
    __apitype = [decoder decodeInt32ForKey: @"apitype"];
    __apitype_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sessionid_isset)
  {
    [encoder encodeObject: __sessionid forKey: @"sessionid"];
  }
  if (__opicture_isset)
  {
    [encoder encodeObject: __opicture forKey: @"opicture"];
  }
  if (__apitype_isset)
  {
    [encoder encodeInt32: __apitype forKey: @"apitype"];
  }
}

- (void) dealloc
{
  [__sessionid release_stub];
  [__opicture release_stub];
  [super dealloc_stub];
}

- (NSString *) sessionid {
  return [[__sessionid retain_stub] autorelease_stub];
}

- (void) setSessionid: (NSString *) sessionid {
  [sessionid retain_stub];
  [__sessionid release_stub];
  __sessionid = sessionid;
  __sessionid_isset = YES;
}

- (BOOL) sessionidIsSet {
  return __sessionid_isset;
}

- (void) unsetSessionid {
  [__sessionid release_stub];
  __sessionid = nil;
  __sessionid_isset = NO;
}

- (NSData *) opicture {
  return [[__opicture retain_stub] autorelease_stub];
}

- (void) setOpicture: (NSData *) opicture {
  [opicture retain_stub];
  [__opicture release_stub];
  __opicture = opicture;
  __opicture_isset = YES;
}

- (BOOL) opictureIsSet {
  return __opicture_isset;
}

- (void) unsetOpicture {
  [__opicture release_stub];
  __opicture = nil;
  __opicture_isset = NO;
}

- (int32_t) apitype {
  return __apitype;
}

- (void) setApitype: (int32_t) apitype {
  __apitype = apitype;
  __apitype_isset = YES;
}

- (BOOL) apitypeIsSet {
  return __apitype_isset;
}

- (void) unsetApitype {
  __apitype_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSessionid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setOpicture: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setApitype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"decryptpicture_args"];
  if (__sessionid_isset) {
    if (__sessionid != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sessionid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__opicture_isset) {
    if (__opicture != nil) {
      [outProtocol writeFieldBeginWithName: @"opicture" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __opicture];
      [outProtocol writeFieldEnd];
    }
  }
  if (__apitype_isset) {
    [outProtocol writeFieldBeginWithName: @"apitype" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __apitype];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"decryptpicture_args("];
  [ms appendString: @"sessionid:"];
  [ms appendFormat: @"\"%@\"", __sessionid];
  [ms appendString: @",opicture:"];
  [ms appendFormat: @"\"%@\"", __opicture];
  [ms appendString: @",apitype:"];
  [ms appendFormat: @"%i", __apitype];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Decryptpicture_result : NSObject <NSCoding> {
  NSData * __success;
  RuntimeError * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSData * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) RuntimeError * ex;
#endif

- (id) init;
- (id) initWithSuccess: (NSData *) success ex: (RuntimeError *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSData *) success;
- (void) setSuccess: (NSData *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (RuntimeError *) ex;
- (void) setEx: (RuntimeError *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Decryptpicture_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSData *) success ex: (RuntimeError *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (NSData *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSData *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (RuntimeError *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (RuntimeError *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          RuntimeError *fieldValue = [[RuntimeError alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Decryptpicture_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeBinary: __success];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Decryptpicture_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface reporterror_args : NSObject <NSCoding> {
  NSString * __mobiletype;
  NSString * __funcpoint;
  NSString * __message;

  BOOL __mobiletype_isset;
  BOOL __funcpoint_isset;
  BOOL __message_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=mobiletype, setter=setMobiletype:) NSString * mobiletype;
@property (nonatomic, retain, getter=funcpoint, setter=setFuncpoint:) NSString * funcpoint;
@property (nonatomic, retain, getter=message, setter=setMessage:) NSString * message;
#endif

- (id) init;
- (id) initWithMobiletype: (NSString *) mobiletype funcpoint: (NSString *) funcpoint message: (NSString *) message;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSString *) mobiletype;
- (void) setMobiletype: (NSString *) mobiletype;
#endif
- (BOOL) mobiletypeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) funcpoint;
- (void) setFuncpoint: (NSString *) funcpoint;
#endif
- (BOOL) funcpointIsSet;

#if !__has_feature(objc_arc)
- (NSString *) message;
- (void) setMessage: (NSString *) message;
#endif
- (BOOL) messageIsSet;

@end

@implementation reporterror_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMobiletype: (NSString *) mobiletype funcpoint: (NSString *) funcpoint message: (NSString *) message
{
  self = [super init];
  __mobiletype = [mobiletype retain_stub];
  __mobiletype_isset = YES;
  __funcpoint = [funcpoint retain_stub];
  __funcpoint_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"mobiletype"])
  {
    __mobiletype = [[decoder decodeObjectForKey: @"mobiletype"] retain_stub];
    __mobiletype_isset = YES;
  }
  if ([decoder containsValueForKey: @"funcpoint"])
  {
    __funcpoint = [[decoder decodeObjectForKey: @"funcpoint"] retain_stub];
    __funcpoint_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__mobiletype_isset)
  {
    [encoder encodeObject: __mobiletype forKey: @"mobiletype"];
  }
  if (__funcpoint_isset)
  {
    [encoder encodeObject: __funcpoint forKey: @"funcpoint"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__mobiletype release_stub];
  [__funcpoint release_stub];
  [__message release_stub];
  [super dealloc_stub];
}

- (NSString *) mobiletype {
  return [[__mobiletype retain_stub] autorelease_stub];
}

- (void) setMobiletype: (NSString *) mobiletype {
  [mobiletype retain_stub];
  [__mobiletype release_stub];
  __mobiletype = mobiletype;
  __mobiletype_isset = YES;
}

- (BOOL) mobiletypeIsSet {
  return __mobiletype_isset;
}

- (void) unsetMobiletype {
  [__mobiletype release_stub];
  __mobiletype = nil;
  __mobiletype_isset = NO;
}

- (NSString *) funcpoint {
  return [[__funcpoint retain_stub] autorelease_stub];
}

- (void) setFuncpoint: (NSString *) funcpoint {
  [funcpoint retain_stub];
  [__funcpoint release_stub];
  __funcpoint = funcpoint;
  __funcpoint_isset = YES;
}

- (BOOL) funcpointIsSet {
  return __funcpoint_isset;
}

- (void) unsetFuncpoint {
  [__funcpoint release_stub];
  __funcpoint = nil;
  __funcpoint_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobiletype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFuncpoint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"reporterror_args"];
  if (__mobiletype_isset) {
    if (__mobiletype != nil) {
      [outProtocol writeFieldBeginWithName: @"mobiletype" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __mobiletype];
      [outProtocol writeFieldEnd];
    }
  }
  if (__funcpoint_isset) {
    if (__funcpoint != nil) {
      [outProtocol writeFieldBeginWithName: @"funcpoint" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __funcpoint];
      [outProtocol writeFieldEnd];
    }
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"reporterror_args("];
  [ms appendString: @"mobiletype:"];
  [ms appendFormat: @"\"%@\"", __mobiletype];
  [ms appendString: @",funcpoint:"];
  [ms appendFormat: @"\"%@\"", __funcpoint];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DriverServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_login: (int64_t) driverid password: (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  [outProtocol writeFieldBeginWithName: @"driverid" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: driverid];
  [outProtocol writeFieldEnd];
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (NSString *) login: (int64_t) driverid password: (NSString *) password
{
  [self send_login : driverid password: password];
  return [self recv_login];
}

- (void) send_checkorder: (NSString *) sessionid
{
  [outProtocol writeMessageBeginWithName: @"checkorder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"checkorder_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_checkorder
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Checkorder_result * result = [[[Checkorder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"checkorder failed: unknown result"];
}

- (int32_t) checkorder: (NSString *) sessionid
{
  [self send_checkorder : sessionid];
  return [self recv_checkorder];
}

- (void) send_acceptorder: (NSString *) sessionid orderid: (int32_t) orderid
{
  [outProtocol writeMessageBeginWithName: @"acceptorder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"acceptorder_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderid" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: orderid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Order *) recv_acceptorder
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Acceptorder_result * result = [[[Acceptorder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"acceptorder failed: unknown result"];
}

- (Order *) acceptorder: (NSString *) sessionid orderid: (int32_t) orderid
{
  [self send_acceptorder : sessionid orderid: orderid];
  return [self recv_acceptorder];
}

- (void) send_getdriverdetail: (NSString *) sessionid driverid: (int64_t) driverid
{
  [outProtocol writeMessageBeginWithName: @"getdriverdetail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getdriverdetail_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"driverid" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: driverid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Driver *) recv_getdriverdetail
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getdriverdetail_result * result = [[[Getdriverdetail_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getdriverdetail failed: unknown result"];
}

- (Driver *) getdriverdetail: (NSString *) sessionid driverid: (int64_t) driverid
{
  [self send_getdriverdetail : sessionid driverid: driverid];
  return [self recv_getdriverdetail];
}

- (void) send_setlocation: (NSString *) sessionid locations: (NSMutableArray *) locations
{
  [outProtocol writeMessageBeginWithName: @"setlocation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setlocation_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  if (locations != nil)  {
    [outProtocol writeFieldBeginWithName: @"locations" type: TType_LIST fieldID: 2];
    {
      [outProtocol writeListBeginWithElementType: TType_STRUCT size: [locations count]];
      int i69;
      for (i69 = 0; i69 < [locations count]; i69++)
      {
        [[locations objectAtIndex: i69] write: outProtocol];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_setlocation
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Setlocation_result * result = [[[Setlocation_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setlocation failed: unknown result"];
}

- (NSString *) setlocation: (NSString *) sessionid locations: (NSMutableArray *) locations
{
  [self send_setlocation : sessionid locations: locations];
  return [self recv_setlocation];
}

- (void) send_setstate: (NSString *) sessionid state: (int32_t) state
{
  [outProtocol writeMessageBeginWithName: @"setstate" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setstate_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: state];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_setstate
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Setstate_result * result = [[[Setstate_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setstate failed: unknown result"];
}

- (NSString *) setstate: (NSString *) sessionid state: (int32_t) state
{
  [self send_setstate : sessionid state: state];
  return [self recv_setstate];
}

- (void) send_createorderbycall: (NSString *) sessionid callmobile: (int64_t) callmobile
{
  [outProtocol writeMessageBeginWithName: @"createorderbycall" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"createorderbycall_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"callmobile" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: callmobile];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Order *) recv_createorderbycall
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Createorderbycall_result * result = [[[Createorderbycall_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"createorderbycall failed: unknown result"];
}

- (Order *) createorderbycall: (NSString *) sessionid callmobile: (int64_t) callmobile
{
  [self send_createorderbycall : sessionid callmobile: callmobile];
  return [self recv_createorderbycall];
}

- (void) send_getorderlist: (NSString *) sessionid state: (int32_t) state
{
  [outProtocol writeMessageBeginWithName: @"getorderlist" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getorderlist_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: state];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getorderlist
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getorderlist_result * result = [[[Getorderlist_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getorderlist failed: unknown result"];
}

- (NSMutableArray *) getorderlist: (NSString *) sessionid state: (int32_t) state
{
  [self send_getorderlist : sessionid state: state];
  return [self recv_getorderlist];
}

- (void) send_getincome: (NSString *) sessionid
{
  [outProtocol writeMessageBeginWithName: @"getincome" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getincome_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableDictionary *) recv_getincome
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getincome_result * result = [[[Getincome_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getincome failed: unknown result"];
}

- (NSMutableDictionary *) getincome: (NSString *) sessionid
{
  [self send_getincome : sessionid];
  return [self recv_getincome];
}

- (void) send_getcomment: (NSString *) sessionid pageindex: (int32_t) pageindex driverid: (int64_t) driverid
{
  [outProtocol writeMessageBeginWithName: @"getcomment" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getcomment_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"pageindex" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: pageindex];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"driverid" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: driverid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getcomment
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getcomment_result * result = [[[Getcomment_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getcomment failed: unknown result"];
}

- (NSMutableArray *) getcomment: (NSString *) sessionid pageindex: (int32_t) pageindex driverid: (int64_t) driverid
{
  [self send_getcomment : sessionid pageindex: pageindex driverid: driverid];
  return [self recv_getcomment];
}

- (void) send_getneardrivers: (NSString *) sessionid count: (int32_t) count distance: (int32_t) distance
{
  [outProtocol writeMessageBeginWithName: @"getneardrivers" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getneardrivers_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: count];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"distance" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: distance];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getneardrivers
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getneardrivers_result * result = [[[Getneardrivers_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getneardrivers failed: unknown result"];
}

- (NSMutableArray *) getneardrivers: (NSString *) sessionid count: (int32_t) count distance: (int32_t) distance
{
  [self send_getneardrivers : sessionid count: count distance: distance];
  return [self recv_getneardrivers];
}

- (void) send_uporder: (NSString *) sessionid order: (reportorder *) order
{
  [outProtocol writeMessageBeginWithName: @"uporder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"uporder_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  if (order != nil)  {
    [outProtocol writeFieldBeginWithName: @"order" type: TType_STRUCT fieldID: 2];
    [order write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_uporder
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Uporder_result * result = [[[Uporder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"uporder failed: unknown result"];
}

- (NSString *) uporder: (NSString *) sessionid order: (reportorder *) order
{
  [self send_uporder : sessionid order: order];
  return [self recv_uporder];
}

- (void) send_cancleorder: (NSString *) sessionid order: (reportorder *) order
{
  [outProtocol writeMessageBeginWithName: @"cancleorder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"cancleorder_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  if (order != nil)  {
    [outProtocol writeFieldBeginWithName: @"order" type: TType_STRUCT fieldID: 2];
    [order write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_cancleorder
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Cancleorder_result * result = [[[Cancleorder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"cancleorder failed: unknown result"];
}

- (NSString *) cancleorder: (NSString *) sessionid order: (reportorder *) order
{
  [self send_cancleorder : sessionid order: order];
  return [self recv_cancleorder];
}

- (void) send_makeuporder: (NSString *) sessionid order: (reportorder *) order
{
  [outProtocol writeMessageBeginWithName: @"makeuporder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"makeuporder_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  if (order != nil)  {
    [outProtocol writeFieldBeginWithName: @"order" type: TType_STRUCT fieldID: 2];
    [order write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_makeuporder
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Makeuporder_result * result = [[[Makeuporder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"makeuporder failed: unknown result"];
}

- (NSString *) makeuporder: (NSString *) sessionid order: (reportorder *) order
{
  [self send_makeuporder : sessionid order: order];
  return [self recv_makeuporder];
}

- (void) send_getnotification: (NSString *) sessionid pageindex: (int32_t) pageindex
{
  [outProtocol writeMessageBeginWithName: @"getnotification" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getnotification_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"pageindex" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: pageindex];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getnotification
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getnotification_result * result = [[[Getnotification_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getnotification failed: unknown result"];
}

- (NSMutableArray *) getnotification: (NSString *) sessionid pageindex: (int32_t) pageindex
{
  [self send_getnotification : sessionid pageindex: pageindex];
  return [self recv_getnotification];
}

- (void) send_startorder: (NSString *) sessionid location: (locationinfo *) location orderstate: (int32_t) orderstate
{
  [outProtocol writeMessageBeginWithName: @"startorder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"startorder_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  if (location != nil)  {
    [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 2];
    [location write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderstate" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: orderstate];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_startorder
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Startorder_result * result = [[[Startorder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"startorder failed: unknown result"];
}

- (NSString *) startorder: (NSString *) sessionid location: (locationinfo *) location orderstate: (int32_t) orderstate
{
  [self send_startorder : sessionid location: location orderstate: orderstate];
  return [self recv_startorder];
}

- (void) send_getdriversoforder: (NSString *) sessionid orderid: (int32_t) orderid
{
  [outProtocol writeMessageBeginWithName: @"getdriversoforder" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getdriversoforder_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"orderid" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: orderid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getdriversoforder
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getdriversoforder_result * result = [[[Getdriversoforder_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getdriversoforder failed: unknown result"];
}

- (NSMutableArray *) getdriversoforder: (NSString *) sessionid orderid: (int32_t) orderid
{
  [self send_getdriversoforder : sessionid orderid: orderid];
  return [self recv_getdriversoforder];
}

- (void) send_finddrivers: (double) longitude latitude: (double) latitude count: (int32_t) count distance: (int32_t) distance
{
  [outProtocol writeMessageBeginWithName: @"finddrivers" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"finddrivers_args"];
  [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 1];
  [outProtocol writeDouble: longitude];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 2];
  [outProtocol writeDouble: latitude];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: count];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"distance" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: distance];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_finddrivers
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Finddrivers_result * result = [[[Finddrivers_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"finddrivers failed: unknown result"];
}

- (NSMutableArray *) finddrivers: (double) longitude latitude: (double) latitude count: (int32_t) count distance: (int32_t) distance
{
  [self send_finddrivers : longitude latitude: latitude count: count distance: distance];
  return [self recv_finddrivers];
}

- (void) send_getvalidatecode: (int64_t) mobile
{
  [outProtocol writeMessageBeginWithName: @"getvalidatecode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getvalidatecode_args"];
  [outProtocol writeFieldBeginWithName: @"mobile" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: mobile];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_getvalidatecode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getvalidatecode_result * result = [[[Getvalidatecode_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getvalidatecode failed: unknown result"];
}

- (NSString *) getvalidatecode: (int64_t) mobile
{
  [self send_getvalidatecode : mobile];
  return [self recv_getvalidatecode];
}

- (void) send_loginforcustomer: (int64_t) mobile validatecode: (NSString *) validatecode
{
  [outProtocol writeMessageBeginWithName: @"loginforcustomer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"loginforcustomer_args"];
  [outProtocol writeFieldBeginWithName: @"mobile" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: mobile];
  [outProtocol writeFieldEnd];
  if (validatecode != nil)  {
    [outProtocol writeFieldBeginWithName: @"validatecode" type: TType_STRING fieldID: 2];
    [outProtocol writeString: validatecode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_loginforcustomer
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Loginforcustomer_result * result = [[[Loginforcustomer_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"loginforcustomer failed: unknown result"];
}

- (NSString *) loginforcustomer: (int64_t) mobile validatecode: (NSString *) validatecode
{
  [self send_loginforcustomer : mobile validatecode: validatecode];
  return [self recv_loginforcustomer];
}

- (void) send_orderdrivers: (NSString *) sessionid mobile: (int64_t) mobile location: (locationinfo *) location reachtime: (int32_t) reachtime count: (int32_t) count
{
  [outProtocol writeMessageBeginWithName: @"orderdrivers" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"orderdrivers_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"mobile" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: mobile];
  [outProtocol writeFieldEnd];
  if (location != nil)  {
    [outProtocol writeFieldBeginWithName: @"location" type: TType_STRUCT fieldID: 3];
    [location write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"reachtime" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: reachtime];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 5];
  [outProtocol writeI32: count];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Order *) recv_orderdrivers
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Orderdrivers_result * result = [[[Orderdrivers_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"orderdrivers failed: unknown result"];
}

- (Order *) orderdrivers: (NSString *) sessionid mobile: (int64_t) mobile location: (locationinfo *) location reachtime: (int32_t) reachtime count: (int32_t) count
{
  [self send_orderdrivers : sessionid mobile: mobile location: location reachtime: reachtime count: count];
  return [self recv_orderdrivers];
}

- (void) send_getdrviercomment: (int32_t) driverid pageindex: (int32_t) pageindex
{
  [outProtocol writeMessageBeginWithName: @"getdrviercomment" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getdrviercomment_args"];
  [outProtocol writeFieldBeginWithName: @"driverid" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: driverid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"pageindex" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: pageindex];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getdrviercomment
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getdrviercomment_result * result = [[[Getdrviercomment_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getdrviercomment failed: unknown result"];
}

- (NSMutableArray *) getdrviercomment: (int32_t) driverid pageindex: (int32_t) pageindex
{
  [self send_getdrviercomment : driverid pageindex: pageindex];
  return [self recv_getdrviercomment];
}

- (void) send_recharge: (int64_t) code mobile: (int64_t) mobile
{
  [outProtocol writeMessageBeginWithName: @"recharge" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"recharge_args"];
  [outProtocol writeFieldBeginWithName: @"code" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: code];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"mobile" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: mobile];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_recharge
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Recharge_result * result = [[[Recharge_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"recharge failed: unknown result"];
}

- (NSString *) recharge: (int64_t) code mobile: (int64_t) mobile
{
  [self send_recharge : code mobile: mobile];
  return [self recv_recharge];
}

- (void) send_getcitylist
{
  [outProtocol writeMessageBeginWithName: @"getcitylist" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getcitylist_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableDictionary *) recv_getcitylist
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getcitylist_result * result = [[[Getcitylist_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getcitylist failed: unknown result"];
}

- (NSMutableDictionary *) getcitylist
{
  [self send_getcitylist];
  return [self recv_getcitylist];
}

- (void) send_getpricelist: (int32_t) city
{
  [outProtocol writeMessageBeginWithName: @"getpricelist" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getpricelist_args"];
  [outProtocol writeFieldBeginWithName: @"city" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: city];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableDictionary *) recv_getpricelist
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getpricelist_result * result = [[[Getpricelist_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getpricelist failed: unknown result"];
}

- (NSMutableDictionary *) getpricelist: (int32_t) city
{
  [self send_getpricelist : city];
  return [self recv_getpricelist];
}

- (void) send_getcustomerorders: (NSString *) sessionid pageindex: (int32_t) pageindex
{
  [outProtocol writeMessageBeginWithName: @"getcustomerorders" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getcustomerorders_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"pageindex" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: pageindex];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getcustomerorders
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Getcustomerorders_result * result = [[[Getcustomerorders_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getcustomerorders failed: unknown result"];
}

- (NSMutableArray *) getcustomerorders: (NSString *) sessionid pageindex: (int32_t) pageindex
{
  [self send_getcustomerorders : sessionid pageindex: pageindex];
  return [self recv_getcustomerorders];
}

- (void) send_sendsuggestion: (int32_t) type message: (NSString *) message
{
  [outProtocol writeMessageBeginWithName: @"sendsuggestion" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendsuggestion_args"];
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  if (message != nil)  {
    [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
    [outProtocol writeString: message];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_sendsuggestion
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Sendsuggestion_result * result = [[[Sendsuggestion_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendsuggestion failed: unknown result"];
}

- (NSString *) sendsuggestion: (int32_t) type message: (NSString *) message
{
  [self send_sendsuggestion : type message: message];
  return [self recv_sendsuggestion];
}

- (void) send_checkversion: (int32_t) clienttype currversion: (double) currversion
{
  [outProtocol writeMessageBeginWithName: @"checkversion" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"checkversion_args"];
  [outProtocol writeFieldBeginWithName: @"clienttype" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: clienttype];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"currversion" type: TType_DOUBLE fieldID: 2];
  [outProtocol writeDouble: currversion];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Appversion *) recv_checkversion
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Checkversion_result * result = [[[Checkversion_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"checkversion failed: unknown result"];
}

- (Appversion *) checkversion: (int32_t) clienttype currversion: (double) currversion
{
  [self send_checkversion : clienttype currversion: currversion];
  return [self recv_checkversion];
}

- (void) send_sendsms: (NSMutableSet *) mobile message: (NSString *) message
{
  [outProtocol writeMessageBeginWithName: @"sendsms" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"sendsms_args"];
  if (mobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"mobile" type: TType_SET fieldID: 1];
    {
      [outProtocol writeSetBeginWithElementType: TType_I64 size: [mobile count]];
      NSEnumerator * _iter70 = [mobile objectEnumerator];
      id obj71;
      while ((obj71 = [_iter70 nextObject]))
      {
        [outProtocol writeI64: [obj71 longLongValue]];
      }
      [outProtocol writeSetEnd];
    }
    [outProtocol writeFieldEnd];
  }
  if (message != nil)  {
    [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
    [outProtocol writeString: message];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_sendsms
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Sendsms_result * result = [[[Sendsms_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"sendsms failed: unknown result"];
}

- (NSString *) sendsms: (NSMutableSet *) mobile message: (NSString *) message
{
  [self send_sendsms : mobile message: message];
  return [self recv_sendsms];
}

- (void) send_decryptpicture: (NSString *) sessionid opicture: (NSData *) opicture apitype: (int32_t) apitype
{
  [outProtocol writeMessageBeginWithName: @"decryptpicture" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"decryptpicture_args"];
  if (sessionid != nil)  {
    [outProtocol writeFieldBeginWithName: @"sessionid" type: TType_STRING fieldID: 1];
    [outProtocol writeString: sessionid];
    [outProtocol writeFieldEnd];
  }
  if (opicture != nil)  {
    [outProtocol writeFieldBeginWithName: @"opicture" type: TType_STRING fieldID: 2];
    [outProtocol writeBinary: opicture];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"apitype" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: apitype];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSData *) recv_decryptpicture
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Decryptpicture_result * result = [[[Decryptpicture_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"decryptpicture failed: unknown result"];
}

- (NSData *) decryptpicture: (NSString *) sessionid opicture: (NSData *) opicture apitype: (int32_t) apitype
{
  [self send_decryptpicture : sessionid opicture: opicture apitype: apitype];
  return [self recv_decryptpicture];
}

- (void) send_reporterror: (NSString *) mobiletype funcpoint: (NSString *) funcpoint message: (NSString *) message
{
  [outProtocol writeMessageBeginWithName: @"reporterror" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"reporterror_args"];
  if (mobiletype != nil)  {
    [outProtocol writeFieldBeginWithName: @"mobiletype" type: TType_STRING fieldID: 1];
    [outProtocol writeString: mobiletype];
    [outProtocol writeFieldEnd];
  }
  if (funcpoint != nil)  {
    [outProtocol writeFieldBeginWithName: @"funcpoint" type: TType_STRING fieldID: 2];
    [outProtocol writeString: funcpoint];
    [outProtocol writeFieldEnd];
  }
  if (message != nil)  {
    [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 3];
    [outProtocol writeString: message];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) reporterror: (NSString *) mobiletype funcpoint: (NSString *) funcpoint message: (NSString *) message
{
  [self send_reporterror : mobiletype funcpoint: funcpoint message: message];
}

@end

@implementation DriverServiceProcessor

- (id) initWithDriverService: (id <DriverService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login"];
  }
  {
    SEL s = @selector(process_checkorder_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"checkorder"];
  }
  {
    SEL s = @selector(process_acceptorder_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"acceptorder"];
  }
  {
    SEL s = @selector(process_getdriverdetail_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getdriverdetail"];
  }
  {
    SEL s = @selector(process_setlocation_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setlocation"];
  }
  {
    SEL s = @selector(process_setstate_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setstate"];
  }
  {
    SEL s = @selector(process_createorderbycall_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"createorderbycall"];
  }
  {
    SEL s = @selector(process_getorderlist_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getorderlist"];
  }
  {
    SEL s = @selector(process_getincome_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getincome"];
  }
  {
    SEL s = @selector(process_getcomment_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getcomment"];
  }
  {
    SEL s = @selector(process_getneardrivers_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getneardrivers"];
  }
  {
    SEL s = @selector(process_uporder_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"uporder"];
  }
  {
    SEL s = @selector(process_cancleorder_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"cancleorder"];
  }
  {
    SEL s = @selector(process_makeuporder_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"makeuporder"];
  }
  {
    SEL s = @selector(process_getnotification_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getnotification"];
  }
  {
    SEL s = @selector(process_startorder_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"startorder"];
  }
  {
    SEL s = @selector(process_getdriversoforder_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getdriversoforder"];
  }
  {
    SEL s = @selector(process_finddrivers_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"finddrivers"];
  }
  {
    SEL s = @selector(process_getvalidatecode_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getvalidatecode"];
  }
  {
    SEL s = @selector(process_loginforcustomer_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"loginforcustomer"];
  }
  {
    SEL s = @selector(process_orderdrivers_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"orderdrivers"];
  }
  {
    SEL s = @selector(process_getdrviercomment_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getdrviercomment"];
  }
  {
    SEL s = @selector(process_recharge_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"recharge"];
  }
  {
    SEL s = @selector(process_getcitylist_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getcitylist"];
  }
  {
    SEL s = @selector(process_getpricelist_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getpricelist"];
  }
  {
    SEL s = @selector(process_getcustomerorders_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getcustomerorders"];
  }
  {
    SEL s = @selector(process_sendsuggestion_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"sendsuggestion"];
  }
  {
    SEL s = @selector(process_checkversion_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"checkversion"];
  }
  {
    SEL s = @selector(process_sendsms_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"sendsms"];
  }
  {
    SEL s = @selector(process_decryptpicture_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"decryptpicture"];
  }
  {
    SEL s = @selector(process_reporterror_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"reporterror"];
  }
  return self;
}

- (id<DriverService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_args * args = [[login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_result * result = [[Login_result alloc] init];
  [result setSuccess: [mService login: [args driverid] password: [args password]]];
  [outProtocol writeMessageBeginWithName: @"login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_checkorder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  checkorder_args * args = [[checkorder_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Checkorder_result * result = [[Checkorder_result alloc] init];
  [result setSuccess: [mService checkorder: [args sessionid]]];
  [outProtocol writeMessageBeginWithName: @"checkorder"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_acceptorder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  acceptorder_args * args = [[acceptorder_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Acceptorder_result * result = [[Acceptorder_result alloc] init];
  [result setSuccess: [mService acceptorder: [args sessionid] orderid: [args orderid]]];
  [outProtocol writeMessageBeginWithName: @"acceptorder"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getdriverdetail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getdriverdetail_args * args = [[getdriverdetail_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getdriverdetail_result * result = [[Getdriverdetail_result alloc] init];
  [result setSuccess: [mService getdriverdetail: [args sessionid] driverid: [args driverid]]];
  [outProtocol writeMessageBeginWithName: @"getdriverdetail"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_setlocation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  setlocation_args * args = [[setlocation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Setlocation_result * result = [[Setlocation_result alloc] init];
  [result setSuccess: [mService setlocation: [args sessionid] locations: [args locations]]];
  [outProtocol writeMessageBeginWithName: @"setlocation"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_setstate_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  setstate_args * args = [[setstate_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Setstate_result * result = [[Setstate_result alloc] init];
  [result setSuccess: [mService setstate: [args sessionid] state: [args state]]];
  [outProtocol writeMessageBeginWithName: @"setstate"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_createorderbycall_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  createorderbycall_args * args = [[createorderbycall_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Createorderbycall_result * result = [[Createorderbycall_result alloc] init];
  [result setSuccess: [mService createorderbycall: [args sessionid] callmobile: [args callmobile]]];
  [outProtocol writeMessageBeginWithName: @"createorderbycall"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getorderlist_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getorderlist_args * args = [[getorderlist_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getorderlist_result * result = [[Getorderlist_result alloc] init];
  [result setSuccess: [mService getorderlist: [args sessionid] state: [args state]]];
  [outProtocol writeMessageBeginWithName: @"getorderlist"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getincome_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getincome_args * args = [[getincome_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getincome_result * result = [[Getincome_result alloc] init];
  [result setSuccess: [mService getincome: [args sessionid]]];
  [outProtocol writeMessageBeginWithName: @"getincome"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getcomment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getcomment_args * args = [[getcomment_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getcomment_result * result = [[Getcomment_result alloc] init];
  [result setSuccess: [mService getcomment: [args sessionid] pageindex: [args pageindex] driverid: [args driverid]]];
  [outProtocol writeMessageBeginWithName: @"getcomment"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getneardrivers_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getneardrivers_args * args = [[getneardrivers_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getneardrivers_result * result = [[Getneardrivers_result alloc] init];
  [result setSuccess: [mService getneardrivers: [args sessionid] count: [args count] distance: [args distance]]];
  [outProtocol writeMessageBeginWithName: @"getneardrivers"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_uporder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  uporder_args * args = [[uporder_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Uporder_result * result = [[Uporder_result alloc] init];
  [result setSuccess: [mService uporder: [args sessionid] order: [args order]]];
  [outProtocol writeMessageBeginWithName: @"uporder"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_cancleorder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  cancleorder_args * args = [[cancleorder_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Cancleorder_result * result = [[Cancleorder_result alloc] init];
  [result setSuccess: [mService cancleorder: [args sessionid] order: [args order]]];
  [outProtocol writeMessageBeginWithName: @"cancleorder"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_makeuporder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  makeuporder_args * args = [[makeuporder_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Makeuporder_result * result = [[Makeuporder_result alloc] init];
  [result setSuccess: [mService makeuporder: [args sessionid] order: [args order]]];
  [outProtocol writeMessageBeginWithName: @"makeuporder"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getnotification_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getnotification_args * args = [[getnotification_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getnotification_result * result = [[Getnotification_result alloc] init];
  [result setSuccess: [mService getnotification: [args sessionid] pageindex: [args pageindex]]];
  [outProtocol writeMessageBeginWithName: @"getnotification"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_startorder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  startorder_args * args = [[startorder_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Startorder_result * result = [[Startorder_result alloc] init];
  [result setSuccess: [mService startorder: [args sessionid] location: [args location] orderstate: [args orderstate]]];
  [outProtocol writeMessageBeginWithName: @"startorder"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getdriversoforder_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getdriversoforder_args * args = [[getdriversoforder_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getdriversoforder_result * result = [[Getdriversoforder_result alloc] init];
  [result setSuccess: [mService getdriversoforder: [args sessionid] orderid: [args orderid]]];
  [outProtocol writeMessageBeginWithName: @"getdriversoforder"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_finddrivers_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  finddrivers_args * args = [[finddrivers_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Finddrivers_result * result = [[Finddrivers_result alloc] init];
  [result setSuccess: [mService finddrivers: [args longitude] latitude: [args latitude] count: [args count] distance: [args distance]]];
  [outProtocol writeMessageBeginWithName: @"finddrivers"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getvalidatecode_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getvalidatecode_args * args = [[getvalidatecode_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getvalidatecode_result * result = [[Getvalidatecode_result alloc] init];
  [result setSuccess: [mService getvalidatecode: [args mobile]]];
  [outProtocol writeMessageBeginWithName: @"getvalidatecode"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_loginforcustomer_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  loginforcustomer_args * args = [[loginforcustomer_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Loginforcustomer_result * result = [[Loginforcustomer_result alloc] init];
  [result setSuccess: [mService loginforcustomer: [args mobile] validatecode: [args validatecode]]];
  [outProtocol writeMessageBeginWithName: @"loginforcustomer"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_orderdrivers_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  orderdrivers_args * args = [[orderdrivers_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Orderdrivers_result * result = [[Orderdrivers_result alloc] init];
  [result setSuccess: [mService orderdrivers: [args sessionid] mobile: [args mobile] location: [args location] reachtime: [args reachtime] count: [args count]]];
  [outProtocol writeMessageBeginWithName: @"orderdrivers"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getdrviercomment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getdrviercomment_args * args = [[getdrviercomment_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getdrviercomment_result * result = [[Getdrviercomment_result alloc] init];
  [result setSuccess: [mService getdrviercomment: [args driverid] pageindex: [args pageindex]]];
  [outProtocol writeMessageBeginWithName: @"getdrviercomment"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_recharge_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  recharge_args * args = [[recharge_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Recharge_result * result = [[Recharge_result alloc] init];
  [result setSuccess: [mService recharge: [args code] mobile: [args mobile]]];
  [outProtocol writeMessageBeginWithName: @"recharge"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getcitylist_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getcitylist_args * args = [[getcitylist_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getcitylist_result * result = [[Getcitylist_result alloc] init];
  [result setSuccess: [mService getcitylist]];
  [outProtocol writeMessageBeginWithName: @"getcitylist"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getpricelist_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getpricelist_args * args = [[getpricelist_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getpricelist_result * result = [[Getpricelist_result alloc] init];
  [result setSuccess: [mService getpricelist: [args city]]];
  [outProtocol writeMessageBeginWithName: @"getpricelist"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getcustomerorders_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getcustomerorders_args * args = [[getcustomerorders_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Getcustomerorders_result * result = [[Getcustomerorders_result alloc] init];
  [result setSuccess: [mService getcustomerorders: [args sessionid] pageindex: [args pageindex]]];
  [outProtocol writeMessageBeginWithName: @"getcustomerorders"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_sendsuggestion_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  sendsuggestion_args * args = [[sendsuggestion_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Sendsuggestion_result * result = [[Sendsuggestion_result alloc] init];
  [result setSuccess: [mService sendsuggestion: [args type] message: [args message]]];
  [outProtocol writeMessageBeginWithName: @"sendsuggestion"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_checkversion_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  checkversion_args * args = [[checkversion_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Checkversion_result * result = [[Checkversion_result alloc] init];
  [result setSuccess: [mService checkversion: [args clienttype] currversion: [args currversion]]];
  [outProtocol writeMessageBeginWithName: @"checkversion"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_sendsms_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  sendsms_args * args = [[sendsms_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Sendsms_result * result = [[Sendsms_result alloc] init];
  [result setSuccess: [mService sendsms: [args mobile] message: [args message]]];
  [outProtocol writeMessageBeginWithName: @"sendsms"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_decryptpicture_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  decryptpicture_args * args = [[decryptpicture_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Decryptpicture_result * result = [[Decryptpicture_result alloc] init];
  [result setSuccess: [mService decryptpicture: [args sessionid] opicture: [args opicture] apitype: [args apitype]]];
  [outProtocol writeMessageBeginWithName: @"decryptpicture"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

